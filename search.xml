<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pandas 入门</title>
    <url>/Pandas-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Pandas的Series类型"><a href="#Pandas的Series类型" class="headerlink" title="Pandas的Series类型"></a>Pandas的Series类型</h2><h3 id="走近Series类型"><a href="#走近Series类型" class="headerlink" title="走近Series类型"></a>走近Series类型</h3><p>自动索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as p</span><br><span class="line">pd.Series([0,1,2,3,4,5])</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>3    3<br>4    4<br>5    5<br>dtype: int64</p>
<p>指定索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.Series([1,2,3,4,5], index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;])</span><br></pre></td></tr></table></figure>

<p>a    1<br>b    2<br>c    3<br>d    4<br>e    5<br>dtype: int64</p>
<h3 id="创建Series类型"><a href="#创建Series类型" class="headerlink" title="创建Series类型"></a>创建Series类型</h3><p>Series 类型可以由如下类型创建：<br>Python 列表、标量值、Python 字典、ndarray、其他函数<br>标量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.Series(3, index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>a    3<br>b    3<br>c    3<br>dtype: int64</p>
<p>列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.Series([&#39;1&#39;,&#39;3&#39;,&#39;2&#39;], index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>a    1<br>b    3<br>c    2<br>dtype: object</p>
<p>字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.Series(&#123;&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3&#125;)</span><br></pre></td></tr></table></figure>

<p>a    1<br>b    2<br>c    3<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.Series(&#123;&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3&#125;, index&#x3D;[&#39;b&#39;,&#39;a&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>b    2<br>a    1<br>c    3<br>dtype: int64<br>ndarray</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">pd.Series(np.arange(3))</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">pd.Series(np.arange(3),index&#x3D;[&#39;b&#39;,&#39;a&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>b    0<br>a    1<br>c    2<br>dtype: int64</p>
<h3 id="Series-类型的基本操作"><a href="#Series-类型的基本操作" class="headerlink" title="Series 类型的基本操作"></a>Series 类型的基本操作</h3><ul>
<li>Series 类型包括index和values两部分</li>
<li>Series 类型的操作类似ndarray类型</li>
<li>Series 类型的操作类似Python字典类型</li>
</ul>
<h4 id="Series-类型包括index和values两部分"><a href="#Series-类型包括index和values两部分" class="headerlink" title="Series 类型包括index和values两部分"></a>Series 类型包括index和values两部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.Series([&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">a.index</span><br></pre></td></tr></table></figure>

<p>Index([‘a’, ‘b’, ‘c’], dtype=’object’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.values</span><br></pre></td></tr></table></figure>

<p>array([‘1’, ‘2’, ‘3’], dtype=object)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[&#39;b&#39;]</span><br></pre></td></tr></table></figure>

<p>‘2’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[1]</span><br></pre></td></tr></table></figure>

<p>‘2’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[[1,2]]</span><br></pre></td></tr></table></figure>

<p>b    2<br>c    3<br>dtype: object</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[[&#39;b&#39;,&#39;c&#39;]]</span><br></pre></td></tr></table></figure>

<p>b    2<br>c    3<br>dtype: object</p>
<p><strong>索引不能混合使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[[&#39;b&#39;],1]</span><br></pre></td></tr></table></figure>

<h4 id="Series-类型的操作类似ndarray类型"><a href="#Series-类型的操作类似ndarray类型" class="headerlink" title="Series 类型的操作类似ndarray类型"></a>Series 类型的操作类似ndarray类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.Series([&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">#返回元素对应的值</span><br><span class="line">a[2]</span><br></pre></td></tr></table></figure>

<p>‘3’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#返回Series类型数据</span><br><span class="line">a[:2]</span><br></pre></td></tr></table></figure>

<p>a    1<br>b    2<br>dtype: object</p>
<ol start="3">
<li>Series 类型的操作类似Python字典类型</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">b &#x3D; pd.Series([&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">b[&#39;b&#39;]</span><br></pre></td></tr></table></figure>

<p>‘2’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;c&#39; in b</span><br></pre></td></tr></table></figure>

<p>True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#自动索引不起作用</span><br><span class="line">1 in b</span><br></pre></td></tr></table></figure>

<p>False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.get(&#39;d&#39;,100)</span><br></pre></td></tr></table></figure>

<p>100</p>
<h4 id="Series类型对齐操作"><a href="#Series类型对齐操作" class="headerlink" title="Series类型对齐操作"></a>Series类型对齐操作</h4><p>观察索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">m &#x3D; pd.Series([1,2,3],[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">n &#x3D; pd.Series([1,2,3],index&#x3D;[&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">m + n</span><br></pre></td></tr></table></figure>

<p>a    NaN<br>b    3.0<br>c    5.0<br>d    NaN<br>dtype: float64</p>
<h4 id="Series对象和索引都可以有一个名字，存储在属性-name中"><a href="#Series对象和索引都可以有一个名字，存储在属性-name中" class="headerlink" title="Series对象和索引都可以有一个名字，存储在属性.name中"></a>Series对象和索引都可以有一个名字，存储在属性.name中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">a &#x3D; pd.Series([1,2,3],[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">a.name</span><br><span class="line">a.name &#x3D; &quot;Series&quot;</span><br><span class="line">a.index.name &#x3D; &quot;ind&quot;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>ind<br>a    1<br>b    2<br>c    3<br>Name: Series, dtype: int64</p>
<h4 id="Series对象和索引的名字可以随时修改并立刻生效"><a href="#Series对象和索引的名字可以随时修改并立刻生效" class="headerlink" title="Series对象和索引的名字可以随时修改并立刻生效"></a>Series对象和索引的名字可以随时修改并立刻生效</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.name &#x3D; &quot;Ser&quot;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>ind<br>a    1<br>b    2<br>c    3<br>Name: Ser, dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.index.name &#x3D; &quot;new_index&quot;</span><br><span class="line">a.index</span><br></pre></td></tr></table></figure>

<p>Index([‘a’, ‘b’, ‘c’], dtype=’object’, name=’new_index’)</p>
<h3 id="Series类型小结"><a href="#Series类型小结" class="headerlink" title="Series类型小结"></a>Series类型小结</h3><ul>
<li>Series是一维带<strong>标签</strong>的数组</li>
<li>Series基本操作类似于ndarray和字典，根据索引对齐</li>
</ul>
<h2 id="Pandas的DataFrame类型"><a href="#Pandas的DataFrame类型" class="headerlink" title="Pandas的DataFrame类型"></a>Pandas的DataFrame类型</h2><h3 id="走近DataFrame类型"><a href="#走近DataFrame类型" class="headerlink" title="走近DataFrame类型"></a>走近DataFrame类型</h3><p><strong>DataFrame 类型由共用索引的一组列组成</strong></p>
<table>
<thead>
<tr>
<th>索引</th>
<th>数据1</th>
<th>数据列2</th>
<th>数据列3</th>
</tr>
</thead>
<tbody><tr>
<td>index0</td>
<td>data00</td>
<td>date01</td>
<td>date03</td>
</tr>
<tr>
<td>index1</td>
<td>data10</td>
<td>date11</td>
<td>date13</td>
</tr>
<tr>
<td>index2</td>
<td>data20</td>
<td>date21</td>
<td>date23</td>
</tr>
</tbody></table>
<ul>
<li><p>DataFrame 是一个表格型的数据类型，每列值可以不同</p>
</li>
<li><p>DataFrame 既有行索引(index)，也有列索引(column)</p>
</li>
<li><p>DataFrame 常用于表达二维数据，但可以表达多维数据</p>
<h3 id="创建-DataFrame-类型"><a href="#创建-DataFrame-类型" class="headerlink" title="创建 DataFrame 类型"></a>创建 DataFrame 类型</h3></li>
<li><p><em>DataFrame 类型可以由以下类型创建*</em></p>
</li>
<li><p>二维ndarray对象</p>
</li>
<li><p>由一维ndarray、列表、字典、元组或Series构成的字典</p>
</li>
<li><p>Series类型</p>
</li>
<li><p>其他的 DataFrame 类型</p>
</li>
<li><p><em>二维ndarray对象创建DataFrame*</em></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">pd.DataFrame(np.arange(15).reshape(3,5))</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>0   0   1   2   3   4<br>1   5   6   7   8   9<br>2  10  11  12  13  14</p>
<p><strong>Series对象创建DataFrame</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">dt &#x3D; &#123;&#39;one&#39;: pd.Series([1,2,3],index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]),</span><br><span class="line">      &#39;two&#39;: pd.Series([4,5],index&#x3D;[&#39;a&#39;,&#39;b&#39;])&#125;</span><br><span class="line"></span><br><span class="line">pd.DataFrame(dt)</span><br></pre></td></tr></table></figure>

<p>one  two<br>a    1  4.0<br>b    2  5.0<br>c    3  NaN</p>
<p><strong>字典对象创建DataFrame</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line"></span><br><span class="line">dt &#x3D; &#123;&#39;one&#39;:[1,2,3], &#39;two&#39;:[4,5,6]&#125;</span><br><span class="line">pd.DataFrame(dt, index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>one  two<br>a    1    4<br>b    2    5<br>c    3    6</p>
<h3 id="DataFrame类型的基本操作"><a href="#DataFrame类型的基本操作" class="headerlink" title="DataFrame类型的基本操作"></a>DataFrame类型的基本操作</h3><p><strong>获取 DataFrame 中的值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line"></span><br><span class="line">dt &#x3D; &#123;&#39;one&#39;:[1,2,3], &#39;two&#39;:[4,5,6]&#125;</span><br><span class="line">data &#x3D; pd.DataFrame(dt, index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>one  two<br>a    1    4<br>b    2    5<br>c    3    6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[&#39;one&#39;]</span><br></pre></td></tr></table></figure>

<p>a    1<br>b    2<br>c    3<br>Name: one, dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.ix[&#39;c&#39;] # 失效？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[&#39;one&#39;][&#39;c&#39;]</span><br></pre></td></tr></table></figure>

<p>3</p>
<h3 id="DataFrame类型小结"><a href="#DataFrame类型小结" class="headerlink" title="DataFrame类型小结"></a>DataFrame类型小结</h3><ul>
<li>DataFrame是二维带“标签”数组，横向index索引，纵向columu索引</li>
<li>DataFrame基本操作类似于Series，依据行列索引</li>
</ul>
<h2 id="Pandas库的数据类型操作"><a href="#Pandas库的数据类型操作" class="headerlink" title="Pandas库的数据类型操作"></a>Pandas库的数据类型操作</h2><h3 id="改变Series和DataFrame对象"><a href="#改变Series和DataFrame对象" class="headerlink" title="改变Series和DataFrame对象"></a>改变Series和DataFrame对象</h3><ul>
<li>增加或重排：重新索引</li>
<li>删除：drop</li>
</ul>
<h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p><strong>.reindex()能改变或重排Series和DataFrame索引</strong></p>
<p><code>.reindex(index=None,columns=None,...)</code>的参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>index, columns</td>
<td>新的行列自定义索引</td>
</tr>
<tr>
<td>fill_value</td>
<td>重新索引中，填充缺失位置的值</td>
</tr>
<tr>
<td>method</td>
<td>填充方法，ffil当期值向前填充，bfill向后填充</td>
</tr>
<tr>
<td>limit</td>
<td>最大填充量</td>
</tr>
<tr>
<td>cope</td>
<td>默认True，生成新的对象，False时，新旧相等不复制</td>
</tr>
</tbody></table>
<p>原DataFrame对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line"></span><br><span class="line">dt &#x3D; &#123;&#39;one&#39;:[1,2,3], &#39;two&#39;:[4,5,6], &#39;three&#39;:[7,8,9]&#125;</span><br><span class="line">data &#x3D; pd.DataFrame(dt, index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>a    1    4    7<br>b    2    5    8<br>c    3    6    9</p>
<p>改变行索引index顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data1 &#x3D; data.reindex(index&#x3D;[&#39;b&#39;,&#39;a&#39;,&#39;c&#39;])</span><br><span class="line">data1</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>b    2    5      8<br>a    1    4      7<br>c    3    6      9</p>
<p>改变列索引columes顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data2 &#x3D; data.reindex(columns&#x3D;[&#39;three&#39;,&#39;two&#39;,&#39;one&#39;])</span><br><span class="line">data2</span><br></pre></td></tr></table></figure>

<p>three  two  one<br>a      7    4    1<br>b      8    5    2<br>c      9    6    3</p>
<p>新增columns索引列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; data.columns.insert(3,&#39;four&#39;)</span><br><span class="line">new &#x3D; data.reindex(columns&#x3D;new, fill_value&#x3D;10)</span><br><span class="line">new</span><br></pre></td></tr></table></figure>

<p>one  two  three  four<br>a    1    4      7    10<br>b    2    5      8    10<br>c    3    6      9    10</p>
<p>新增index索引行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; data.index.insert(3,&#39;d&#39;)</span><br><span class="line">new &#x3D; data.reindex(index&#x3D;new, fill_value&#x3D;11)</span><br><span class="line">new</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>a    1    4      7<br>b    2    5      8<br>c    3    6      9<br>d   11   11     11</p>
<h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><ul>
<li>Series和DataFrame的索引是Index类型</li>
<li>index对象是不可修改类型</li>
</ul>
<p>索引类型操作的常用方法如下表</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.appen(index)</td>
<td>连接另一个index对象，产生新的index对象</td>
</tr>
<tr>
<td>.diff(index)</td>
<td>计算差集</td>
</tr>
<tr>
<td>.intersertion(index)</td>
<td>计算交集</td>
</tr>
<tr>
<td>.union(index)</td>
<td>计算并集</td>
</tr>
<tr>
<td>.delete(loc)</td>
<td>删除loc位置的元素</td>
</tr>
<tr>
<td>.insert(loc,e)</td>
<td>在loc位置增加一个元素e</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line"></span><br><span class="line">dt &#x3D; &#123;&#39;one&#39;:[1,2,3], &#39;two&#39;:[4,5,6], &#39;three&#39;:[7,8,9]&#125;</span><br><span class="line">data &#x3D; pd.DataFrame(dt, index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>a    1    4      7<br>b    2    5      8<br>c    3    6      9</p>
<p>新增columns索引列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; data.columns.insert(3,&#39;four&#39;)</span><br><span class="line">new &#x3D; data.reindex(columns&#x3D;new, fill_value&#x3D;10)</span><br><span class="line">new</span><br></pre></td></tr></table></figure>

<p>one  two  three  four<br>a    1    4      7    10<br>b    2    5      8    10<br>c    3    6      9    10</p>
<p>新增index索引行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; data.index.insert(3,&#39;d&#39;)</span><br><span class="line">new &#x3D; data.reindex(index&#x3D;new, fill_value&#x3D;11)</span><br><span class="line">new</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>a    1    4      7<br>b    2    5      8<br>c    3    6      9<br>d   11   11     11</p>
<p>删除索引列和行(依据索引位置)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new1 &#x3D; data.columns.delete(2)</span><br><span class="line">data.reindex(columns&#x3D;new1)</span><br></pre></td></tr></table></figure>

<p>one  two<br>a    1    4<br>b    2    5<br>c    3    6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new2 &#x3D; data.index.delete(2)</span><br><span class="line">data.reindex(index&#x3D;new2)</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>a    1    4      7<br>b    2    5      8</p>
<p>删除索引列和行(依据索引标签)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new3 &#x3D; data.index.drop([&#39;a&#39;,&#39;c&#39;])</span><br><span class="line">data.reindex(index&#x3D;new3)</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>b    2    5    8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new4 &#x3D; data.columns.drop([&#39;one&#39;,&#39;three&#39;])</span><br><span class="line">data.reindex(columns&#x3D;new4)</span><br></pre></td></tr></table></figure>

<p>two<br>a    4<br>b    5<br>c    6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.drop(&#39;a&#39;,axis&#x3D;0)</span><br></pre></td></tr></table></figure>

<p>one  two  three<br>b    2    5      8<br>c    3    6      9</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.drop(&#39;three&#39;,axis&#x3D;1)</span><br></pre></td></tr></table></figure>

<p>one  two<br>a    1    4<br>b    2    5<br>c    3    6</p>
<h3 id="Pandas库的数据类型运算"><a href="#Pandas库的数据类型运算" class="headerlink" title="Pandas库的数据类型运算"></a>Pandas库的数据类型运算</h3><h4 id="算术运算法则"><a href="#算术运算法则" class="headerlink" title="算术运算法则"></a>算术运算法则</h4><ul>
<li>算术运算根据行列索引，补齐后运算，运算默认产生浮点数</li>
<li>补齐时缺项填充NaN(空值)</li>
<li>二维、一维和零维之间为广播运算</li>
<li>采用+,-,*,/符号进行的二元运算产生新的对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(12).reshape(3,4))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0  1   2   3<br>0  0  1   2   3<br>1  4  5   6   7<br>2  8  9  10  11</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">b &#x3D; pd.DataFrame(np.arange(20).reshape(4,5))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>0   0   1   2   3   4<br>1   5   6   7   8   9<br>2  10  11  12  13  14<br>3  15  16  17  18  19</p>
<p>二维与一维运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a + b</span><br></pre></td></tr></table></figure>

<p>0     1     2     3   4<br>0   0.0   2.0   4.0   6.0 NaN<br>1   9.0  11.0  13.0  15.0 NaN<br>2  18.0  20.0  22.0  24.0 NaN<br>3   NaN   NaN   NaN   NaN NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a - b</span><br></pre></td></tr></table></figure>

<p>0    1    2    3   4<br>0  0.0  0.0  0.0  0.0 NaN<br>1 -1.0 -1.0 -1.0 -1.0 NaN<br>2 -2.0 -2.0 -2.0 -2.0 NaN<br>3  NaN  NaN  NaN  NaN NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a*b</span><br></pre></td></tr></table></figure>

<p>0     1      2      3   4<br>0   0.0   1.0    4.0    9.0 NaN<br>1  20.0  30.0   42.0   56.0 NaN<br>2  80.0  99.0  120.0  143.0 NaN<br>3   NaN   NaN    NaN    NaN NaN</p>
<p>二维与标量运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a + 1</span><br></pre></td></tr></table></figure>

<p>0   1   2   3<br>0  1   2   3   4<br>1  5   6   7   8<br>2  9  10  11  12</p>
<p>二维与一维运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; pd.Series(np.arange(3))</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a + c #默认在1轴运算</span><br></pre></td></tr></table></figure>

<p>0     1     2   3<br>0  0.0   2.0   4.0 NaN<br>1  4.0   6.0   8.0 NaN<br>2  8.0  10.0  12.0 NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.add(c, axis&#x3D;0)</span><br></pre></td></tr></table></figure>

<p>0   1   2   3<br>0   0   1   2   3<br>1   5   6   7   8<br>2  10  11  12  13</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.add(c, axis&#x3D;1)</span><br></pre></td></tr></table></figure>

<p>0     1     2   3<br>0  0.0   2.0   4.0 NaN<br>1  4.0   6.0   8.0 NaN<br>2  8.0  10.0  12.0 NaN</p>
<h4 id="比较运算法则"><a href="#比较运算法则" class="headerlink" title="比较运算法则"></a>比较运算法则</h4><ul>
<li>比较运算只能比较相同索引的元素，不进行补齐</li>
<li>二维、一维和零位之间为广播运算</li>
<li>采用&gt;、&lt;、&gt;=、&lt;=、==、!=等符号进行的二元运算产生布尔对象</li>
</ul>
<p>二维与标量运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(12).reshape(3,4))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0  1   2   3<br>0  0  1   2   3<br>1  4  5   6   7<br>2  8  9  10  11</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &gt; 5</span><br></pre></td></tr></table></figure>

<p>0      1      2      3<br>0  False  False  False  False<br>1  False  False   True   True<br>2   True   True   True   True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; pd.Series(np.arange(5))</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>3    3<br>4    4<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &gt; 2</span><br></pre></td></tr></table></figure>

<p>0    False<br>1    False<br>2    False<br>3     True<br>4     True<br>dtype: bool</p>
<p>二维与一维运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; pd.Series(np.arange(4))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>3    3<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &gt; b</span><br></pre></td></tr></table></figure>

<p>0      1      2      3<br>0  False  False  False  False<br>1   True   True   True   True<br>2   True   True   True   True</p>
<p>二维与二维</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; pd.DataFrame(np.arange(9).reshape(3,3))</span><br><span class="line">d &#x3D; pd.DataFrame(np.full((3,3),3))</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>

<p>0  1  2<br>0  0  1  2<br>1  3  4  5<br>2  6  7  8<br>    0  1  2<br>0  3  3  3<br>1  3  3  3<br>2  3  3  3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &gt; d</span><br></pre></td></tr></table></figure>

<p>0      1      2<br>0  False  False  False<br>1  False   True   True<br>2   True   True   True</p>
<h3 id="Pandas小结"><a href="#Pandas小结" class="headerlink" title="Pandas小结"></a>Pandas小结</h3><ul>
<li>Series = 索引 + 一维数组</li>
<li>DataFrame = 行列索引 + 二维数据</li>
<li>理解数据类型与索引的关系，操作索引即操作数据</li>
<li>重新索引、数据删除、算术运算、比较运算</li>
<li>注意：同一维度的运算，考虑元素间的对齐和填充，不同维度的运算，考虑广播运算的方式和方法</li>
<li>像对待单一数据一样对待Series和DataFrame对象</li>
</ul>
<h2 id="数据的排序"><a href="#数据的排序" class="headerlink" title="数据的排序"></a>数据的排序</h2><h3 id="根据索引进行排序"><a href="#根据索引进行排序" class="headerlink" title="根据索引进行排序"></a>根据索引进行排序</h3><p>.sort_index()方法在指定轴上根据<strong>索引</strong>进行排序，默认升序</p>
<p>.sort_index(axis=0,ascending=True)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>axis</td>
<td>排序的轴向，默认0轴(列)</td>
</tr>
<tr>
<td>ascending</td>
<td>默认True，升序</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(25).reshape(5,5))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>0   0   1   2   3   4<br>1   5   6   7   8   9<br>2  10  11  12  13  14<br>3  15  16  17  18  19<br>4  20  21  22  23  24</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.sort_index(axis&#x3D;0,ascending&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>4  20  21  22  23  24<br>3  15  16  17  18  19<br>2  10  11  12  13  14<br>1   5   6   7   8   9<br>0   0   1   2   3   4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.sort_index(axis&#x3D;1,ascending&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>4   3   2   1   0<br>0   4   3   2   1   0<br>1   9   8   7   6   5<br>2  14  13  12  11  10<br>3  19  18  17  16  15<br>4  24  23  22  21  20</p>
<h3 id="根据数值进行排序"><a href="#根据数值进行排序" class="headerlink" title="根据数值进行排序"></a>根据数值进行排序</h3><p>.sort_values()方法在指定轴上根据<strong>数值</strong>进行排序，默认升序</p>
<p>.sort_values(by,axis=0,ascending=True)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>by</td>
<td>axis轴上的某个索引或索引列表</td>
</tr>
<tr>
<td>axis</td>
<td>排序的轴向，默认0轴(列)</td>
</tr>
<tr>
<td>ascending</td>
<td>默认True，升序</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(9).reshape(3,3), index&#x3D;[&#39;b&#39;,&#39;a&#39;,&#39;c&#39;])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0  1  2<br>b  0  1  2<br>a  3  4  5<br>c  6  7  8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.sort_values(1,axis&#x3D;0,ascending&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>0  1  2<br>2  6  7  8<br>1  3  4  5<br>0  0  1  2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.sort_values(&#39;a&#39;,axis&#x3D;1,ascending&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>2  1  0<br>b  2  1  0<br>a  5  4  3<br>c  8  7  6</p>
<h3 id="NaN统一放到排序末尾"><a href="#NaN统一放到排序末尾" class="headerlink" title="NaN统一放到排序末尾"></a>NaN统一放到排序末尾</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(4).reshape(2,2))</span><br><span class="line">b &#x3D; pd.DataFrame(np.arange(9).reshape(3,3))</span><br><span class="line">c &#x3D; a + b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>0    1   2<br>0  0.0  2.0 NaN<br>1  5.0  7.0 NaN<br>2  NaN  NaN NaN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.sort_values(1,ascending&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>0    1   2<br>1  5.0  7.0 NaN<br>0  0.0  2.0 NaN<br>2  NaN  NaN NaN</p>
<h2 id="数据的基本统计分析"><a href="#数据的基本统计分析" class="headerlink" title="数据的基本统计分析"></a>数据的基本统计分析</h2><h3 id="基本的统计分析函数"><a href="#基本的统计分析函数" class="headerlink" title="基本的统计分析函数"></a>基本的统计分析函数</h3><ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.sum()</td>
<td>计算数据的总和，按轴计算，下同</td>
</tr>
<tr>
<td>.count()</td>
<td>非NaN值的数量</td>
</tr>
<tr>
<td>.mean(),.median()</td>
<td>算术平均值，算术中位数</td>
</tr>
<tr>
<td>.var(),.std(),.min(),.max()</td>
<td>方差，标准差，最值</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.describe()</td>
<td>针对0轴的统计汇总</td>
</tr>
</tbody></table>
<ul>
<li>适用于Series类型</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.argmin(),.argmax()</td>
<td>最值位置的索引(自动索引)</td>
</tr>
<tr>
<td>.idxmin(),.idxmax()</td>
<td>最值位置的索引(自定义索引)</td>
</tr>
</tbody></table>
<p><strong>.describe()方法-Series类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.Series(np.arange(5))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0    0<br>1    1<br>2    2<br>3    3<br>4    4<br>dtype: int64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.describe()</span><br></pre></td></tr></table></figure>

<p>count    5.000000<br>mean     2.000000<br>std      1.581139<br>min      0.000000<br>25%      1.000000<br>50%      2.000000<br>75%      3.000000<br>max      4.000000<br>dtype: float64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type(a.describe())</span><br></pre></td></tr></table></figure>

<p>pandas.core.series.Series</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.describe()[&#39;max&#39;]</span><br></pre></td></tr></table></figure>

<p>4.0</p>
<p><strong>.describe()方法-DataFrame类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">b &#x3D; pd.DataFrame(np.arange(12).reshape(3,4))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>0  1   2   3<br>0  0  1   2   3<br>1  4  5   6   7<br>2  8  9  10  11</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type(b.describe())</span><br></pre></td></tr></table></figure>

<p>pandas.core.frame.DataFrame</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.describe()</span><br></pre></td></tr></table></figure>

<p>0    1     2     3<br>count  3.0  3.0   3.0   3.0<br>mean   4.0  5.0   6.0   7.0<br>std    4.0  4.0   4.0   4.0<br>min    0.0  1.0   2.0   3.0<br>25%    2.0  3.0   4.0   5.0<br>50%    4.0  5.0   6.0   7.0<br>75%    6.0  7.0   8.0   9.0<br>max    8.0  9.0  10.0  11.0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># b.describe().ix[&#39;max&#39;] #用.loc（）代替.ix（）</span><br><span class="line">b.describe().loc[&#39;mean&#39;]</span><br></pre></td></tr></table></figure>

<p>0    4.0<br>1    5.0<br>2    6.0<br>3    7.0<br>Name: mean, dtype: float64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.describe().loc[:,1:2]</span><br></pre></td></tr></table></figure>

<p>1     2<br>count  3.0   3.0<br>mean   5.0   6.0<br>std    4.0   4.0<br>min    1.0   2.0<br>25%    3.0   4.0<br>50%    5.0   6.0<br>75%    7.0   8.0<br>max    9.0  10.0</p>
<h3 id="数据的累计统计分析"><a href="#数据的累计统计分析" class="headerlink" title="数据的累计统计分析"></a>数据的累计统计分析</h3><ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.cumsum()</td>
<td>依次给出前 1、2、3、…、n 个数的和</td>
</tr>
<tr>
<td>.cumprop()</td>
<td>依次给出前 1、2、3、…、n 个数的积</td>
</tr>
<tr>
<td>.cummax()</td>
<td>依次给出前 1、2、3、…、n 个数的最大值</td>
</tr>
<tr>
<td>.cummin()</td>
<td>依次给出前 1、2、3、…、n 个数的最小值</td>
</tr>
</tbody></table>
<ul>
<li>适用于Series和DataFrame类型，滚动计算(窗口计算)</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.rolling(w).sum()</td>
<td>依次计算相邻 w 个元素的和</td>
</tr>
<tr>
<td>.rolling(w).mean()</td>
<td>依次计算相邻 w 个元素的算术平均值</td>
</tr>
<tr>
<td>.rolling(w).var()</td>
<td>依次计算相邻 w 个元素的方差</td>
</tr>
<tr>
<td>.rolling(w).std()</td>
<td>依次计算相邻 w 个元素的标准差</td>
</tr>
<tr>
<td>.rolling(w).min()/.max()</td>
<td>依次计算相邻 w 个元素的最值</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.DataFrame(np.arange(15).reshape(3,5),index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>a   0   1   2   3   4<br>b   5   6   7   8   9<br>c  10  11  12  13  14</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.cumsum()</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>a   0   1   2   3   4<br>b   5   7   9  11  13<br>c  15  18  21  24  27</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.cumprod()</span><br></pre></td></tr></table></figure>

<p>0   1    2    3    4<br>a  0   1    2    3    4<br>b  0   6   14   24   36<br>c  0  66  168  312  504</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.cummax()</span><br></pre></td></tr></table></figure>

<p>0   1   2   3   4<br>a   0   1   2   3   4<br>b   5   6   7   8   9<br>c  10  11  12  13  14</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.rolling(2).sum()</span><br></pre></td></tr></table></figure>

<p>0     1     2     3     4<br>a   NaN   NaN   NaN   NaN   NaN<br>b   5.0   7.0   9.0  11.0  13.0<br>c  15.0  17.0  19.0  21.0  23.0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.rolling(2).mean()</span><br></pre></td></tr></table></figure>

<p>0    1    2     3     4<br>a  NaN  NaN  NaN   NaN   NaN<br>b  2.5  3.5  4.5   5.5   6.5<br>c  7.5  8.5  9.5  10.5  11.5</p>
<h3 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h3><p>相关分析<br>两个事物，表示X和Y，如何判断他们之间存在相关性？</p>
<ul>
<li>X增大，Y增大，两个变量正相关</li>
<li>X增大，Y减小，两个变量负相关</li>
<li>X增大，Y不变，两个变量不相关</li>
</ul>
<p>协方差</p>
<ul>
<li>协方差&gt;0,两个变量正相关</li>
<li>协方差&lt;0,两个变量负相关</li>
<li>协方差=0,两个变量独立无关</li>
</ul>
<ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.cov()</td>
<td>计算协方差矩阵</td>
</tr>
<tr>
<td>.corr()</td>
<td>计算相关数矩阵，Person, Sperman, Kendall等系数</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.Series([1,2,3,4,5])</span><br><span class="line">b &#x3D; pd.Series([0.8,2.2,2.8,4.2,5.2])</span><br><span class="line"></span><br><span class="line">a.cov(b)</span><br></pre></td></tr></table></figure>

<p>2.7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.corr(b)</span><br></pre></td></tr></table></figure>

<p>0.9945577827230722</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a &#x3D; pd.Series([1,2,3,4,5])</span><br><span class="line">b &#x3D; pd.Series([5,4,3,2,1])</span><br><span class="line"></span><br><span class="line">a.cov(b)</span><br></pre></td></tr></table></figure>

<p>-2.5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.corr(b)</span><br></pre></td></tr></table></figure>

<p>-0.9999999999999999</p>
]]></content>
      <categories>
        <category>科学计算与可视化</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>Series</tag>
        <tag>DataFrame</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法</title>
    <url>/Markdown-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote>
<p>Markdown是什么？<br>为什么要使用它？<br>怎么使用？<br>尝试一下</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Markdown是什么"><a href="#Markdown是什么" class="headerlink" title="Markdown是什么"></a>Markdown是什么</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>
<h3 id="为什么要使用它"><a href="#为什么要使用它" class="headerlink" title="为什么要使用它"></a>为什么要使用它</h3><ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>
</blockquote>
<p>2）使用<code>#</code>，可表示1-3级标题。</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题</p>
</blockquote>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用  </p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>
<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}</p>
<p>代码区块：</p>
<pre><code>void main()
{
    printf(&quot;Hello, Markdown.&quot;);
}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>
<blockquote>
<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项</p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>
<h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠\"></a>反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="符号’-’"><a href="#符号’-’" class="headerlink" title="符号’`’"></a>符号’`’</h4><p>起到标记作用。如：</p>
<blockquote>
<p>`ctrl+a`</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><code>ctrl+a</code></p>
</blockquote>
<h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4><ul>
<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>
<li><strong>在线</strong>的dillinger.io评价也不错</li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>
<li><strong>Linux</strong>下的ReText不错。</li>
</ul>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。</p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>列表的使用(非traditonal markdown)：</p>
<p>用 <code>|</code> 表示表格纵向边界，表头和表内容用 <code>-</code> 隔开，并可用 <code>:</code> 进行对齐设置，两边都有 <code>:</code> 则表示居中，若不加 <code>:</code> 则默认左对齐。</p>
<table>
<thead>
<tr>
<th align="center">代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td align="center">MarkDownCopy</td>
<td><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
</tbody></table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote>
<p><a href="http://xianbai.me/learn-md/article/syntax/horizontal-rule.html" target="_blank" rel="noopener">Markdown 入门参考</a></p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a></p>
</blockquote>
]]></content>
      <categories>
        <category>折腾技术</category>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>NumPy 实现手绘图像效果</title>
    <url>/NumPy%E5%AE%9E%E7%8E%B0%E6%89%8B%E7%BB%98%E5%9B%BE%E5%83%8F%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h2 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h2><figure class="half">
    <img src="/Python数据分析之Numpy/beauty.jpg" width="300"><img src="/Python数据分析之Numpy/ch_beauty.jpg" width="300">
    <img src="/Python数据分析之Numpy/sky.jpg" width="300"><img src="/Python数据分析之Numpy/ch_sky.jpg" width="300">
    <img src="/Python数据分析之Numpy/flower.jpg" width="300"><img src="/Python数据分析之Numpy/ch_flower.jpg" width="300">
</figure>

<h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><ul>
<li>导包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>

<ul>
<li>打开图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.array(Image.open(&quot;.&#x2F;flower.jpg&quot;))</span><br></pre></td></tr></table></figure>

<ul>
<li>查看图片信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(a.shape, a.dtype)</span><br></pre></td></tr></table></figure>

<p>(3648, 2736, 3) uint8</p>
<ul>
<li>处理图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; 255 - a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">im &#x3D; Image.fromarray(b.astype(&#39;uint8&#39;))</span><br></pre></td></tr></table></figure>

<ul>
<li>保存图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">im.save(&quot;new.jpg&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; np.array(Image.open(&quot;.&#x2F;flower.jpg&quot;).convert(&#39;L&#39;))</span><br><span class="line">c &#x3D; (100&#x2F;255)*a + 150</span><br><span class="line"></span><br><span class="line">im &#x3D; Image.fromarray(b.astype(&#39;uint8&#39;))</span><br><span class="line">im.save(&quot;new2.jpg&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; np.array(Image.open(&quot;.&#x2F;flower.jpg&quot;).convert(&#39;L&#39;))</span><br><span class="line">d &#x3D; 255 * (a&#x2F;255) ** 2</span><br><span class="line"></span><br><span class="line">im &#x3D; Image.fromarray(d.astype(&#39;uint8&#39;))</span><br><span class="line">im.save(&quot;new3.jpg&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="手绘风格图片"><a href="#手绘风格图片" class="headerlink" title="手绘风格图片"></a>手绘风格图片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; np.array(Image.open(&quot;&#x2F;content&#x2F;sky.jpeg&quot;))</span><br><span class="line"></span><br><span class="line"># 处理图片</span><br><span class="line">depth &#x3D; 10 # 预设深度值为10，取值范围1-100 </span><br><span class="line"></span><br><span class="line"># 提取图片的梯度值</span><br><span class="line">grad &#x3D; np.gradient(a)</span><br><span class="line"></span><br><span class="line"># 提取x，y方向上的梯度值</span><br><span class="line">grad_x, grad_y, grad_z &#x3D; grad</span><br><span class="line"></span><br><span class="line">#根据深度调整x和y方向上的梯度值</span><br><span class="line">grad_x &#x3D; grad_x * depth&#x2F;100</span><br><span class="line">grad_y &#x3D; grad_y * depth&#x2F;100</span><br><span class="line"></span><br><span class="line">vec_el &#x3D; np.pi&#x2F;2.2</span><br><span class="line">vec_az &#x3D; np.pi&#x2F;4.</span><br><span class="line"></span><br><span class="line"># dx, dy, dz 是光源对xyz三方向的影响程度</span><br><span class="line">dx &#x3D; np.cos(vec_el) * np.cos(vec_az)</span><br><span class="line">dy &#x3D; np.cos(vec_el) * np.sin(vec_az)</span><br><span class="line">dz &#x3D; np.sin(vec_el)</span><br><span class="line"></span><br><span class="line"># 梯度归一化</span><br><span class="line">A &#x3D; np.sqrt(grad_x**2 + grad_y**2 + 1.)</span><br><span class="line"></span><br><span class="line">## 图像平面的单位法向量</span><br><span class="line">uni_x &#x3D; grad_x&#x2F;A</span><br><span class="line">uni_y &#x3D; grad_y&#x2F;A</span><br><span class="line">uni_z &#x3D; 1.&#x2F;A</span><br><span class="line"></span><br><span class="line">b &#x3D; 255*(dx*uni_x + dy*uni_y + dz*uni_z)</span><br><span class="line"></span><br><span class="line"># 将数据限定在[0, 255]</span><br><span class="line">b &#x3D; b.clip(0, 255)</span><br><span class="line"></span><br><span class="line">im &#x3D; Image.fromarray(b.astype(&#39;uint8&#39;))</span><br><span class="line"></span><br><span class="line"># 保存图片</span><br><span class="line">im.save(&quot;ch_sky.jpg&quot;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科学计算与可视化</category>
      </categories>
      <tags>
        <tag>NumPy</tag>
        <tag>科学计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a><br> <!-- more --></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo 主题设置</title>
    <url>/hexo-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="首页截断设置"><a href="#首页截断设置" class="headerlink" title="首页截断设置"></a>首页截断设置</h2><p>默认首页会显示全文，这里设置只显示摘要。<br>修改方法：在主题配置文件设置<code>excerpt_description: true</code>和<code>excerpt_description: true</code></p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在文章中需要截断的地方加上代码：<code>&lt;!-- more --&gt;</code></p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在文章元信息中指定摘要：<code>description</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">- 分类</span><br><span class="line">tags:</span><br><span class="line">- 标签</span><br><span class="line">- 标签</span><br><span class="line">description: 摘要内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>由于平时没事也拍点东西，于是就想也有个展示的页面。探索了一下，可以利用 <code>next</code> 的插件 <code>group picture</code> 来实现，他的原理很简单，就是利用 <code>next</code> 主题的 <code>Tag Plugin</code> 这种语法提供了一种展示图片的布局。</p>
<p>需要以下几步：</p>
<ul>
<li><p>首先 <code>hexo new page photos</code> 新建一个名为 <code>photos</code> 的标签页，并且在 <code>themes/next/languages/zh-CN.yml</code> 中的 <code>menu</code> 一项下面添加 <code>photos: 相册</code>，这样在首页菜单栏才会显示中文相册。</p>
</li>
<li><p>其次，可以直接在 <code>source/photos/index.md</code> 写文章，并在需要插入图片的时候用以下方式来组织你的图片列表：</p>
</li>
</ul>
<h3 id="文字描述"><a href="#文字描述" class="headerlink" title="文字描述"></a>文字描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gp 4-2 %&#125;</span><br><span class="line">  ![](&#x2F;images&#x2F;docs&#x2F;github.png)</span><br><span class="line">  ![](&#x2F;images&#x2F;docs&#x2F;github.png)</span><br><span class="line">  ![](&#x2F;images&#x2F;docs&#x2F;github.png)</span><br><span class="line">  ![](&#x2F;images&#x2F;docs&#x2F;github.png)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ‘4-2’ 的意思是改组一共有4张图片，每行排最多2张。</p>
<ul>
<li>除了图片之外其他的文字和章节标题都可以像往常一样加。</li>
</ul>
<h2 id="阅读进度按钮-文章右下角"><a href="#阅读进度按钮-文章右下角" class="headerlink" title="阅读进度按钮(文章右下角)"></a>阅读进度按钮(文章右下角)</h2><blockquote>
<p>安装插件：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在站点配置文件_config.yml 中添加以下代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moon_menu:</span><br><span class="line">  back2top:</span><br><span class="line">    enable: true</span><br><span class="line">    icon: fa fa-chevron-up</span><br><span class="line">    func: back2top</span><br><span class="line">    order: -1</span><br><span class="line">  back2bottom:</span><br><span class="line">    enable: true</span><br><span class="line">    icon: fa fa-chevron-down</span><br><span class="line">    func: back2bottom</span><br><span class="line">    order: -2</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果想要修改按钮距离底部和右侧的位置，可以按下面的步骤操作：</p>
<blockquote>
<p>在博客的 <code>themes/next/source/css/_custom/custom.styl</code> 文件中添加以下代码<br>提示：若没有 <code>_custom</code> 目录和<code>custom.styl</code> 文件需要创建，并且在 <code>themes/next/source/css/main.styl</code> 文件中添加 <code>@import &quot;_custom/custom&quot;;</code> 代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.moon-menu,.moon-menu-bg,.moon-menu-content &#123;</span><br><span class="line">  right: 20px !important; # 距离页面右侧像素</span><br><span class="line">  bottom: 20px !important; # 距离页面底部像素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要按钮出现在左下角，可以添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.moon-menu,.moon-menu-bg,.moon-menu-content &#123;</span><br><span class="line">  left: 20px !important;</span><br><span class="line">&#125;</span><br><span class="line">.moon-menu-item &#123;</span><br><span class="line">  left: unset !important;</span><br><span class="line">  right: 1rem !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(<strong>感谢原作者提供的宝贵的意见！</strong>)</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/" target="_blank" rel="noopener">Hexo Next 主题进阶设置</a><br><a href="https://tding.top/archives/567debe0.html" target="_blank" rel="noopener">Hexo 修改 back2top 标签 @小丁的个人博客</a><br><a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu" target="_blank" rel="noopener">jiangtj-lab/hexo-cake-moon-menu</a></p>
</blockquote>
]]></content>
      <categories>
        <category>折腾技术</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>主题设置</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析之 NumPy</title>
    <url>/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BNumpy/</url>
    <content><![CDATA[<h2 id="NumPy-简介"><a href="#NumPy-简介" class="headerlink" title="NumPy 简介"></a>NumPy 简介</h2><p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>
<p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p>
<ul>
<li>一个强大的N维数组对象 ndarray</li>
<li>广播功能函数</li>
<li>整合 C/C++/Fortran 代码的工具</li>
<li>线性代数、傅里叶变换、随机数生成等功能</li>
</ul>
<h2 id="NumPy-数组属性"><a href="#NumPy-数组属性" class="headerlink" title="NumPy 数组属性"></a>NumPy 数组属性</h2><p>本章节我们将来了解 NumPy 数组的一些基本属性。<br> <strong>秩（rank）</strong>：NumPy 数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2，以此类推。  </p>
<p> <strong>轴（axis）</strong>：在 NumPy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 NumPy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。</p>
<p>很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。</p>
<p>NumPy 的数组中比较重要 ndarray 对象属性有</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ndarray.ndim</td>
<td>秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td>ndarray.shape</td>
<td>数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr>
<td>ndarray.size</td>
<td>数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr>
<td>ndarray.dtype</td>
<td>ndarray 对象的元素类型</td>
</tr>
<tr>
<td>ndarray.itemsize</td>
<td>ndarray 对象中每个元素的大小，以字节为单位</td>
</tr>
</tbody></table>
<p>首先导入 numpy 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.array([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">print(a.ndim)</span><br><span class="line">print(a.shape)</span><br><span class="line">print(a.size)</span><br><span class="line"></span><br><span class="line">print(a.dtype)</span><br><span class="line">print(a.itemsize)</span><br></pre></td></tr></table></figure>

<p>2<br>(3, 3)<br>9</p>
<p>int64<br>8</p>
<h2 id="NumPy-数据类型"><a href="#NumPy-数据类型" class="headerlink" title="NumPy 数据类型"></a>NumPy 数据类型</h2><p>numpy 支持的数据类型比 Python 内置的类型要多很多，基本上可以和 C 语言的数据类型对应上。<br>其中部分类型对应为 Python 内置的类型。下表列举了常用 NumPy 基本类型。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bool_</td>
<td>布尔型数据类型（True 或者 False）</td>
</tr>
<tr>
<td>int_</td>
<td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td>
</tr>
<tr>
<td>intc</td>
<td>与 C 的 int 类型一样，一般是 int32 或 int 64</td>
</tr>
<tr>
<td>intp</td>
<td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td>
</tr>
<tr>
<td>int8</td>
<td>字节（-128 to 127）</td>
</tr>
<tr>
<td>int16</td>
<td>整数（-32768 to 32767）</td>
</tr>
<tr>
<td>int32</td>
<td>整数（-2147483648 to 2147483647）</td>
</tr>
<tr>
<td>int64</td>
<td>整数（-9223372036854775808 to 9223372036854775807）</td>
</tr>
<tr>
<td>uint8</td>
<td>无符号整数（0 to 255）</td>
</tr>
<tr>
<td>uint16</td>
<td>无符号整数（0 to 65535）</td>
</tr>
<tr>
<td>uint32</td>
<td>无符号整数（0 to 4294967295）</td>
</tr>
<tr>
<td>uint64</td>
<td>无符号整数（0 to 18446744073709551615）</td>
</tr>
<tr>
<td>float_</td>
<td>float64 类型的简写</td>
</tr>
<tr>
<td>float16</td>
<td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td>
</tr>
<tr>
<td>float32</td>
<td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td>
</tr>
<tr>
<td>float64</td>
<td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td>
</tr>
<tr>
<td>complex_</td>
<td>complex128 类型的简写，即 128 位复数</td>
</tr>
<tr>
<td>complex64</td>
<td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td>
</tr>
<tr>
<td>complex128</td>
<td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td>
</tr>
</tbody></table>
<p>numpy 的数值类型实际上是 dtype 对象的实例，并对应唯一的字符，包括 np.bool_，np.int32，np.float32，等等。</p>
<p>接下来我们可以通过实例来理解。</p>
<h3 id="使用标量类型"><a href="#使用标量类型" class="headerlink" title="使用标量类型"></a>使用标量类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dt &#x3D; np.dtype(np.int32)</span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># int8, int16, int32, int64 四种数据类型可以使用字符串 &#39;i1&#39;, &#39;i2&#39;,&#39;i4&#39;,&#39;i8&#39; 代替</span><br><span class="line"></span><br><span class="line">dt &#x3D; np.dtype(&#39;i4&#39;)</span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure>

<p>int32<br>int32</p>
<h3 id="使用结构化数据类型"><a href="#使用结构化数据类型" class="headerlink" title="使用结构化数据类型"></a>使用结构化数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建结构化数据类型</span><br><span class="line">import numpy as np</span><br><span class="line">dt &#x3D; np.dtype([(&#39;age&#39;,np.int8)]) </span><br><span class="line"></span><br><span class="line"># 将数据类型应用于 ndarray 对象</span><br><span class="line">a &#x3D; np.array([(10,),(20,),(30,)], dtype &#x3D; dt) </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># 类型字段名可以用于存取实际的 age 列 </span><br><span class="line">print(a[&#39;age&#39;])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(10,) (20,) (30,)]</span><br><span class="line">[10 20 30]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下面的示例定义一个结构化数据类型 student，包含字符串字段 name，整数字段 age，及浮点字段 marks，并将这个 dtype 应用到 ndarray 对象。</span><br><span class="line"></span><br><span class="line">student &#x3D; np.dtype([(&#39;name&#39;,&#39;S20&#39;), (&#39;age&#39;, &#39;i1&#39;), (&#39;marks&#39;, &#39;f4&#39;)]) </span><br><span class="line">print(student)</span><br><span class="line"># 提示：S, a：(byte-)字符串</span><br><span class="line">a &#x3D; np.array([(&#39;abc&#39;, 21, 50),(&#39;xyz&#39;, 18, 75)], dtype &#x3D; student) </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;name&#39;, &#39;S20&#39;), (&#39;age&#39;, &#39;i1&#39;), (&#39;marks&#39;, &#39;&lt;f4&#39;)]</span><br><span class="line">[(b&#39;abc&#39;, 21, 50.) (b&#39;xyz&#39;, 18, 75.)]</span><br></pre></td></tr></table></figure>

<h2 id="ndarray-创建数组"><a href="#ndarray-创建数组" class="headerlink" title="ndarray 创建数组"></a>ndarray 创建数组</h2><ul>
<li>从python中的列表、元组等类型创建ndarry数组。</li>
<li>使用NumPy中的函数创建ndarray数组，如：arrange，ones,zeros等。</li>
<li>从字节流中创建ndarray数组。</li>
<li>从文件中读取特定格式，创建ndarray数组。</li>
</ul>
<h3 id="从python中的列表、元组等类型创建ndarry数组。"><a href="#从python中的列表、元组等类型创建ndarry数组。" class="headerlink" title="从python中的列表、元组等类型创建ndarry数组。"></a>从python中的列表、元组等类型创建ndarry数组。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列表</span><br><span class="line">a &#x3D; np.array([0,1,2,3])</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># 元组</span><br><span class="line">b &#x3D; np.array((0,1,2,3,4,5))</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"># 元组+列表</span><br><span class="line">c &#x3D; np.array([(0,1,2),[3,4,5],(6,7,8)])</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<p>[0 1 2 3]<br>[0 1 2 3 4 5]<br>[[0 1 2]<br>[3 4 5]<br>[6 7 8]]</p>
<h3 id="使用NumPy中的函数创建ndarray数组，如：arange，ones-zeros-ones-like-zeros-like等。"><a href="#使用NumPy中的函数创建ndarray数组，如：arange，ones-zeros-ones-like-zeros-like等。" class="headerlink" title="使用NumPy中的函数创建ndarray数组，如：arange，ones, zeros, ones_like, zeros_like等。"></a>使用NumPy中的函数创建ndarray数组，如：arange，ones, zeros, ones_like, zeros_like等。</h3><p> (1) ones,full 类</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>np.arange(n)</td>
<td>类似于range()函数，返回ndarray类型，元素从0到n-1</td>
</tr>
<tr>
<td>np.ones(shape)</td>
<td>生成全1数组，shape是元组类型</td>
</tr>
<tr>
<td>np.zeros(shape)</td>
<td>生成全0数组，shape是元组类型</td>
</tr>
<tr>
<td>np.full(shape,val)</td>
<td>生成一个数组，，每个元素值都是val, shape是元组类型</td>
</tr>
<tr>
<td>np.eye(n)</td>
<td>创建一个n*n的矩阵，对角线为1，其余为0</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(1,5)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b &#x3D; np.zeros((2,2))</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c &#x3D; np.ones((2,3))</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">d &#x3D; np.full((3,4),2)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">e &#x3D; np.eye(3)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure>

<p>[1 2 3 4]<br>[[0. 0.]<br>[0. 0.]]<br>[[1. 1. 1.]<br>[1. 1. 1.]]<br>[[2 2 2 2]<br>[2 2 2 2]<br>[2 2 2 2]]<br>[[1. 0. 0.]<br>[0. 1. 0.]<br>[0. 0. 1.]]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(d.dtype)</span><br><span class="line">print(d.itemsize)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int64</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<p> (2) ones_like,full_like 类</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>np.zeros_like(a)</td>
<td>根据数组a的形状,生成全0数组</td>
</tr>
<tr>
<td>np.ones_like(a)</td>
<td>根据数组a的形状,生成全1数组</td>
</tr>
<tr>
<td>np.full_like(a,val)</td>
<td>根据数组a的形状,生成值为val的数组</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.full((3,3),5)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">zeros &#x3D; np.zeros_like(a)</span><br><span class="line">print(zeros)</span><br><span class="line"></span><br><span class="line">ones &#x3D; np.ones_like(a)</span><br><span class="line">print(ones)</span><br><span class="line"></span><br><span class="line">full &#x3D; np.full_like(a,3)</span><br><span class="line">print(full)</span><br></pre></td></tr></table></figure>

<p>[[5 5 5]<br>    [5 5 5]<br>    [5 5 5]]</p>
<p>[[0 0 0]<br>    [0 0 0]<br>    [0 0 0]]</p>
<p>[[1 1 1]<br>    [1 1 1]<br>    [1 1 1]]</p>
<p>[[3 3 3]<br>    [3 3 3]<br>    [3 3 3]]</p>
<p> (3) linspace, concatenate 类</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>np.linspace()</td>
<td>根据起止数据等间距填充数据，形成数组</td>
</tr>
<tr>
<td>np.concatenate()</td>
<td>将多个数组合并成一个新的数组</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.linspace(1,5,5)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b &#x3D; np.linspace(1,5,5,endpoint&#x3D;False)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c &#x3D; np.concatenate((a,b))</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1. 2. 3. 4. 5.]</span><br><span class="line">[1.  1.8 2.6 3.4 4.2]</span><br><span class="line">[1.  2.  3.  4.  5.  1.  1.8 2.6 3.4 4.2]</span><br></pre></td></tr></table></figure>

<h3 id="从字节流中创建ndarray数组。"><a href="#从字节流中创建ndarray数组。" class="headerlink" title="从字节流中创建ndarray数组。"></a>从字节流中创建ndarray数组。</h3><h3 id="从文件中读取特定格式，创建ndarray数组。"><a href="#从文件中读取特定格式，创建ndarray数组。" class="headerlink" title="从文件中读取特定格式，创建ndarray数组。"></a>从文件中读取特定格式，创建ndarray数组。</h3><h2 id="ndarray-数组的变换"><a href="#ndarray-数组的变换" class="headerlink" title="ndarray 数组的变换"></a>ndarray 数组的变换</h2><h3 id="ndarray-数组的维度变换"><a href="#ndarray-数组的维度变换" class="headerlink" title="ndarray 数组的维度变换"></a>ndarray 数组的维度变换</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.reshape(shape)</td>
<td>不改变数组元素，返回一个shape形状的数组，原数组不变</td>
</tr>
<tr>
<td>.resize(shape)</td>
<td>与.reshape()功能一致，但修改原数组</td>
</tr>
<tr>
<td>.swapaxes(ax1, ax2)</td>
<td>将数组n个维度中的两个维度进行调换</td>
</tr>
<tr>
<td>.flatten()</td>
<td>对数组降维，返回一维数组，原数组不变</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.ones((2,3))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1. 1. 1.]</span><br><span class="line">[1. 1. 1.]]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a.reshape(3,2)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1. 1. 1.]</span><br><span class="line">[1. 1. 1.]]</span><br><span class="line">[[1. 1.]</span><br><span class="line">[1. 1.]</span><br><span class="line">[1. 1.]]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; a.resize(3,2)</span><br><span class="line">print(a)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1. 1.]</span><br><span class="line">[1. 1.]</span><br><span class="line">[1. 1.]]</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; np.ones((2,1,1))</span><br><span class="line">print(new)</span><br><span class="line">d &#x3D; new.swapaxes(0,1)</span><br><span class="line">print(new)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>

<p>[[[1.]]<br> [[1.]]]</p>
<p>[[[1.]]<br> [[1.]]]</p>
<p>[[[1.],[1.]]]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new &#x3D; np.ones((3,3))</span><br><span class="line">print(new)</span><br><span class="line">e &#x3D; a.flatten()</span><br><span class="line">print(new)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure>

<p>[[1. 1. 1.]<br>[1. 1. 1.]<br>[1. 1. 1.]]</p>
<p>[[1. 1. 1.]<br>[1. 1. 1.]<br>[1. 1. 1.]]</p>
<p>[1. 1. 1. 1. 1. 1.]</p>
<h3 id="ndarray-数组的类型变换"><a href="#ndarray-数组的类型变换" class="headerlink" title="ndarray 数组的类型变换"></a>ndarray 数组的类型变换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>new = old.astype(np.type)</td>
<td>old类型按type类型转换为new类型</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.ones((3,3),dtype&#x3D;int)</span><br><span class="line">a.dtype</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 </span><br><span class="line">	</span><br><span class="line">		dtype(&#39;int64&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a.astype(np.float)</span><br><span class="line">b.dtype</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">47 </span><br><span class="line">	</span><br><span class="line">		dtype(&#39;float64&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="ndarray-数组转换为列表"><a href="#ndarray-数组转换为列表" class="headerlink" title="ndarray 数组转换为列表"></a>ndarray 数组转换为列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.ones((3,3))</span><br><span class="line">b &#x3D; a.tolist()</span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line">type(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]</span><br><span class="line">list</span><br></pre></td></tr></table></figure>

<h2 id="数组的索引和切片"><a href="#数组的索引和切片" class="headerlink" title="数组的索引和切片"></a>数组的索引和切片</h2><blockquote>
<p>索引：获取数组中特定位置元素的过程<br>切片：获取数组中元素子集的过程</p>
</blockquote>
<h3 id="一维数组的索引和切片"><a href="#一维数组的索引和切片" class="headerlink" title="一维数组的索引和切片"></a>一维数组的索引和切片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一维数组的索引</span><br><span class="line">a[1]</span><br><span class="line"></span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一维数组的切片</span><br><span class="line">a[1:6]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 步长为2</span><br><span class="line">a[1:6:2]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([1, 3, 5])</span><br></pre></td></tr></table></figure>

<h3 id="多维数组的索引和切片"><a href="#多维数组的索引和切片" class="headerlink" title="多维数组的索引和切片"></a>多维数组的索引和切片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(0,27).reshape((3,3,3))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">	[ 3,  4,  5],</span><br><span class="line">	[ 6,  7,  8]],</span><br><span class="line"></span><br><span class="line">	[[ 9, 10, 11],</span><br><span class="line">	[12, 13, 14],</span><br><span class="line">	[15, 16, 17]],</span><br><span class="line"></span><br><span class="line">	[[18, 19, 20],</span><br><span class="line">	[21, 22, 23],</span><br><span class="line">	[24, 25, 26]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多维数组的索引</span><br><span class="line">a[1,:,1]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([10, 13, 16])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[:,1,:]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 3,  4,  5],</span><br><span class="line">	[12, 13, 14],</span><br><span class="line">	[21, 22, 23]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多维数组的切片</span><br><span class="line">a[1,0:3:2,0:3:2]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 9, 11],</span><br><span class="line">	[15, 17]])</span><br></pre></td></tr></table></figure>

<h2 id="ndarray-数组的运算"><a href="#ndarray-数组的运算" class="headerlink" title="ndarray 数组的运算"></a>ndarray 数组的运算</h2><h3 id="数组与标量之间的运算"><a href="#数组与标量之间的运算" class="headerlink" title="数组与标量之间的运算"></a>数组与标量之间的运算</h3><p>数组中的每一个元素与标量之间的运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange((18)).reshape(2,3,3)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">	[ 3,  4,  5],</span><br><span class="line">	[ 6,  7,  8]],</span><br><span class="line"></span><br><span class="line">	[[ 9, 10, 11],</span><br><span class="line">	[12, 13, 14],</span><br><span class="line">	[15, 16, 17]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a + 1</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[ 1,  2,  3],</span><br><span class="line">	[ 4,  5,  6],</span><br><span class="line">	[ 7,  8,  9]],</span><br><span class="line"></span><br><span class="line">	[[10, 11, 12],</span><br><span class="line">	[13, 14, 15],</span><br><span class="line">	[16, 17, 18]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; (a + 1) * 2</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[ 2,  4,  6],</span><br><span class="line">	[ 8, 10, 12],</span><br><span class="line">	[14, 16, 18]],</span><br><span class="line"></span><br><span class="line">	[[20, 22, 24],</span><br><span class="line">	[26, 28, 30],</span><br><span class="line">	[32, 34, 36]]])</span><br></pre></td></tr></table></figure>

<h3 id="NumPy-一元函数"><a href="#NumPy-一元函数" class="headerlink" title="NumPy 一元函数"></a>NumPy 一元函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>np.abs(),np.fabs()</td>
<td>计算数组各元素的绝对值</td>
</tr>
<tr>
<td>np.sqrt()</td>
<td>计算数组各元素的平方根</td>
</tr>
<tr>
<td>np.square()</td>
<td>计算数组各元素的平方</td>
</tr>
<tr>
<td>np.log(),np.log10(),np.log2()</td>
<td>*</td>
</tr>
<tr>
<td>np.ceil(),np.floor()</td>
<td>计算数组各元素的ceiling值或floor值</td>
</tr>
<tr>
<td>…….</td>
<td>……</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange((18)).reshape(2,3,3)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">	[ 3,  4,  5],</span><br><span class="line">	[ 6,  7,  8]],</span><br><span class="line"></span><br><span class="line">	[[ 9, 10, 11],</span><br><span class="line">	[12, 13, 14],</span><br><span class="line">	[15, 16, 17]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sqrt(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[0.        , 1.        , 1.41421356],</span><br><span class="line">	[1.73205081, 2.        , 2.23606798],</span><br><span class="line">	[2.44948974, 2.64575131, 2.82842712]],</span><br><span class="line"></span><br><span class="line">	[[3.        , 3.16227766, 3.31662479],</span><br><span class="line">	[3.46410162, 3.60555128, 3.74165739],</span><br><span class="line">	[3.87298335, 4.        , 4.12310563]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.square(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[[  0,   1,   4],</span><br><span class="line">	[  9,  16,  25],</span><br><span class="line">	[ 36,  49,  64]],</span><br><span class="line"></span><br><span class="line">	[[ 81, 100, 121],</span><br><span class="line">	[144, 169, 196],</span><br><span class="line">	[225, 256, 289]]])</span><br></pre></td></tr></table></figure>

<h3 id="NumPy-二元函数"><a href="#NumPy-二元函数" class="headerlink" title="NumPy 二元函数"></a>NumPy 二元函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+, -, <em>, /, *</em></td>
<td>两个数组各元素进行对应运算</td>
</tr>
<tr>
<td>np.maximum(x,x),np.fmax()</td>
<td>…</td>
</tr>
<tr>
<td>np.minimum(x,x),np.fmin()</td>
<td>…</td>
</tr>
<tr>
<td>np.mod(x,y)</td>
<td>…</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化 a</span><br><span class="line">a &#x3D; np.arange(4) + 1</span><br><span class="line">a &#x3D; a.reshape((2,2))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[1, 2],</span><br><span class="line">	[3, 4]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化 b</span><br><span class="line">b &#x3D; a + 1</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[2, 3],</span><br><span class="line">	[4, 5]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数组相加</span><br><span class="line">c &#x3D; a + b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[3, 5],</span><br><span class="line">	[7, 9]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数组相乘</span><br><span class="line">d &#x3D; a * b</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 2,  6],</span><br><span class="line">	[12, 20]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 两个数组间的最大值</span><br><span class="line">np.maximum(a,b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[2, 3],</span><br><span class="line">	[4, 5]])</span><br></pre></td></tr></table></figure>

<h2 id="NumPy-文件的读取和保存"><a href="#NumPy-文件的读取和保存" class="headerlink" title="NumPy 文件的读取和保存"></a>NumPy 文件的读取和保存</h2><h3 id="一维和二维数据的读取"><a href="#一维和二维数据的读取" class="headerlink" title="一维和二维数据的读取"></a>一维和二维数据的读取</h3><blockquote>
<p><strong>np.savetxt(frame,array,fmt=’%.18e’,delimiter=None)</strong>    </p>
<blockquote>
<ul>
<li>frame: 文件、字符串或产生器(例如: txt和csv格式文件)，可以是 .gz 或 .bz2 的压缩文件</li>
<li>array: 存入数组</li>
<li>fmt: 写入文件的格式，例如: %d,%.2,f%.18e</li>
<li>delimiter: 分割字符串，默认是任何空格</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><strong>np.loadtxt(frame, dtype=np.float, delimiter=None, unpack=False)</strong>    </p>
<blockquote>
<ul>
<li>unpack: 如果True，读取属性将分别写入不同变量</li>
</ul>
</blockquote>
</blockquote>
<hr>
<p><em>注意: 这两个函数只能读取和保存一二维的数据。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(50).reshape((5,10))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],</span><br><span class="line">	[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],</span><br><span class="line">	[20, 21, 22, 23, 24, 25, 26, 27, 28, 29],</span><br><span class="line">	[30, 31, 32, 33, 34, 35, 36, 37, 38, 39],</span><br><span class="line">	[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])</span><br></pre></td></tr></table></figure>

<h4 id="保存和读取txt文件"><a href="#保存和读取txt文件" class="headerlink" title="保存和读取txt文件"></a>保存和读取txt文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.savetxt(&#39;a.txt&#39;,a,&#39;%d&#39;,delimiter&#x3D;&#39;,&#39;)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.loadtxt(&#39;a.txt&#39;,dtype&#x3D;np.int,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],</span><br><span class="line">	[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],</span><br><span class="line">	[20, 21, 22, 23, 24, 25, 26, 27, 28, 29],</span><br><span class="line">	[30, 31, 32, 33, 34, 35, 36, 37, 38, 39],</span><br><span class="line">	[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])</span><br></pre></td></tr></table></figure>

<h4 id="保存和读取csv文件"><a href="#保存和读取csv文件" class="headerlink" title="保存和读取csv文件"></a>保存和读取csv文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.savetxt(&#39;a.csv&#39;,a,&#39;%d&#39;,delimiter&#x3D;&#39;,&#39;)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.loadtxt(&#39;a.csv&#39;,dtype&#x3D;np.int,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],</span><br><span class="line">	[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],</span><br><span class="line">	[20, 21, 22, 23, 24, 25, 26, 27, 28, 29],</span><br><span class="line">	[30, 31, 32, 33, 34, 35, 36, 37, 38, 39],</span><br><span class="line">	[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])</span><br></pre></td></tr></table></figure>

<h3 id="多维数据的读取和保存"><a href="#多维数据的读取和保存" class="headerlink" title="多维数据的读取和保存"></a>多维数据的读取和保存</h3><p>&lt;fkrFB_ArOjhA</p>
<p> <strong>np.save(fname, array) 或 np.save(fname, array)</strong>   </p>
<ul>
<li><p>frame:文件名，以 <code>.npy</code> 为扩展名，压缩扩展名为 <code>.npz</code></p>
</li>
<li><p>array:数组变量</p>
</li>
<li><p><em>np.load(fname) | 读取函数*</em></p>
</li>
</ul>
<p><em>缺点：文件的格式单一，通用性不强</em></p>
<hr>
<p> <strong>np.tofile(frame, sep=’’, format=’%s’)</strong></p>
<ul>
<li><p>frame: 文件、字符串</p>
</li>
<li><p>sep: 数据分割字符串，如果是空串，写入文件为二进制</p>
</li>
<li><p>format: 写入数据的格式</p>
</li>
<li><p><em>np.fromfile(frame,dtype=float,count=-1, sep=’’)*</em></p>
</li>
<li><p>frame: 文件、字符串</p>
</li>
<li><p>dtype: 读取的数据类型</p>
</li>
<li><p>count: 读入元素个数，-1表示读入整个文件</p>
</li>
<li><p>sep: 数据分割字符串，如果是空串，写入文件为二进制</p>
</li>
</ul>
<p><em>缺点：读取数据时需要知道数据的格式，或者单独保存文件的格式</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m &#x3D; np.arange(30).reshape((3,10))</span><br><span class="line">m</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],</span><br><span class="line">	[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],</span><br><span class="line">	[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]])</span><br></pre></td></tr></table></figure>

<h4 id="使用save和load函数"><a href="#使用save和load函数" class="headerlink" title="使用save和load函数"></a>使用save和load函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">savefile &#x3D; np.save(&#39;m.npy&#39;,m)</span><br><span class="line">np.load(&#39;m.npy&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],</span><br><span class="line">	[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],</span><br><span class="line">	[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]])</span><br></pre></td></tr></table></figure>

<h4 id="使用tofile和fromfile函数"><a href="#使用tofile和fromfile函数" class="headerlink" title="使用tofile和fromfile函数"></a>使用tofile和fromfile函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">savefile &#x3D; m.tofile(&#39;m.dat&#39;,sep&#x3D;&#39;,&#39;, format&#x3D;&#39;%.2f&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.fromfile(&#39;m.dat&#39;,dtype&#x3D;float,count&#x3D;-1,sep&#x3D;&#39;,&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.,</span><br><span class="line">	13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.,</span><br><span class="line">	26., 27., 28., 29.])</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.fromfile(&#39;m.dat&#39;,dtype&#x3D;float,count&#x3D;-1,sep&#x3D;&#39;,&#39;).reshape(3,10)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.],</span><br><span class="line">	[10., 11., 12., 13., 14., 15., 16., 17., 18., 19.],</span><br><span class="line">	[20., 21., 22., 23., 24., 25., 26., 27., 28., 29.]])</span><br></pre></td></tr></table></figure>


<h2 id="NumPy-的随机数函数"><a href="#NumPy-的随机数函数" class="headerlink" title="NumPy 的随机数函数"></a>NumPy 的随机数函数</h2><p>Python 和 NumPy 都具有生成随机数的函数库，Python的random库主要为一般的标量功能提供随机数服务，NumPy 的random库主要为数组类型提供随机数的服务。</p>
<h3 id="np-random-的随机数函数-1"><a href="#np-random-的随机数函数-1" class="headerlink" title="np.random 的随机数函数(1)"></a>np.random 的随机数函数(1)</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>rand(d0,d1,…,dn)</td>
<td>根据 d0-dn 创建随机数组，浮点数，[0,1]，均匀分布</td>
</tr>
<tr>
<td>randn(d0,d1,…,dn)</td>
<td>根据 d0-dn 创建随机数组，标准正态分布</td>
</tr>
<tr>
<td>randint(low[,high,shape])</td>
<td>根据 shape 创建随机数或随机数组，范围是 [high,shape]</td>
</tr>
<tr>
<td>seed(s)</td>
<td>随机数种子，s 是给定的种子值</td>
</tr>
</tbody></table>
<p><strong>rand()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.random.rand(2,3,3)</span><br></pre></td></tr></table></figure>

<p>array([[[8.94497830e-01, 2.34801201e-01, 1.56375260e-01],<br>                [3.86079509e-01, 6.07716824e-01, 9.76386947e-01],<br>                [9.88833624e-01, 1.87015871e-01, 2.49261652e-01]],</p>
<pre><code>[[4.38793585e-01, 9.33345192e-01, 3.25477177e-01],
[9.53108023e-01, 8.44668102e-01, 5.80157668e-01],
[4.32552565e-04, 5.67461271e-01, 4.84972620e-02]]])</code></pre><p><strong>randn()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.random.randn(3,3,2)</span><br></pre></td></tr></table></figure>

<pre><code>array([[[-0.37790886,  0.6395278 ],
            [-0.24616262,  2.74511575],
            [ 0.16196892,  1.29811646]],

            [[-0.00515758,  1.18005635],
            [-1.08420337, -0.2720978 ],
            [-1.74630337,  0.30978125]],

            [[ 1.09349392,  1.50483826],
            [-2.11818328, -0.60798799],
            [ 0.15658639, -1.62635444]]])</code></pre><p><strong>randint()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; np.random.randint(1,3,5)</span><br></pre></td></tr></table></figure>

<p>array([2, 1, 2, 2, 2])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; np.random.randint(3,8,[3,4])</span><br></pre></td></tr></table></figure>

<p>array([[7, 7, 5, 5],<br>                [6, 3, 3, 4],<br>                [5, 4, 4, 6]])</p>
<p><strong>seed()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定随机数种子，两次生成的随机数相同</span><br><span class="line">np.random.seed(8)</span><br><span class="line">e &#x3D; np.random.randint(1,5,(2,3))</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

<p>array([[4, 1, 2],<br>                [2, 2, 3]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.seed(8)</span><br><span class="line">f &#x3D; np.random.randint(1,5,(2,3))</span><br><span class="line">f</span><br></pre></td></tr></table></figure>

<p>array([[4, 1, 2],<br>                [2, 2, 3]])</p>
<h3 id="np-random-的随机数函数-2"><a href="#np-random-的随机数函数-2" class="headerlink" title="np.random 的随机数函数(2)"></a>np.random 的随机数函数(2)</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>shuffle(a)</td>
<td>根据数组a的第一轴进行随机排列，原数组改变</td>
</tr>
<tr>
<td>permutation(a)</td>
<td>功能同shuffle(a)，但是原数组不变，产生新的数组</td>
</tr>
<tr>
<td>choice(a,size,replace,p)</td>
<td>从数组a中，以概率P抽取size形状的数组，relpace默认True，表示数组a中元素可重用</td>
</tr>
</tbody></table>
<p><strong>shuffle()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(15).reshape(3,5)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[ 0,  1,  2,  3,  4],<br>                [ 5,  6,  7,  8,  9],<br>                [10, 11, 12, 13, 14]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.shuffle(a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[10, 11, 12, 13, 14],<br>                [ 5,  6,  7,  8,  9],<br>                [ 0,  1,  2,  3,  4]])</p>
<p><strong>permutation()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.eye(3)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[1., 0., 0.],<br>                [0., 1., 0.],<br>                [0., 0., 1.]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.random.permutation(a)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>array([[0., 0., 1.],<br>                [1., 0., 0.],<br>                [0., 1., 0.]])</p>
<p><strong>choice</strong>()函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(15)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.random.choice(a,(3,5))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>array([[ 1,  3, 10, 11, 12],<br>                [13,  9, 13, 13,  2],<br>                [11,  2, 14,  6, 13]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; np.random.choice(a,(3,5),replace&#x3D;False)</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>array([[ 0, 13, 14, 11,  6],<br>                [ 1,  2, 12,  7, 10],<br>                [ 5,  4,  3,  9,  8]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; np.random.choice(a,(2,3),replace&#x3D;False,p&#x3D;a&#x2F;np.sum(a))</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<p>array([[14,  8, 10],<br>                [13, 12,  3]])</p>
<h2 id="NumPy-的统计函数"><a href="#NumPy-的统计函数" class="headerlink" title="NumPy 的统计函数"></a>NumPy 的统计函数</h2><h3 id="np-random-的统计函数-1"><a href="#np-random-的统计函数-1" class="headerlink" title="np.random 的统计函数(1)"></a>np.random 的统计函数(1)</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>uniform(low,high,size)</td>
<td>产生具有均匀分布的数组，low起始值，high结束值，size形状</td>
</tr>
<tr>
<td>mormal(loc,scale,size)</td>
<td>产生具有正态分布的数组，loc均值，scale标准差，size形状</td>
</tr>
<tr>
<td>poisson(lam,size)</td>
<td>产生具有泊(bo)松分布的数组，lam随机事件发生率, size形状</td>
</tr>
</tbody></table>
<p><strong>uniform(), mormal(), poisson()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.uniform(0,1,5)</span><br></pre></td></tr></table></figure>

<p>array([0.60364448, 0.79557456, 0.03200816, 0.45544782, 0.79017254])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.normal(loc&#x3D;3,scale&#x3D;2.5,size&#x3D;(2,5))</span><br></pre></td></tr></table></figure>

<p>array([[3.07816078, 3.45482397, 2.84267818, 1.64607885, 4.18629604],<br>                [0.08852207, 1.74772652, 1.9785976 , 0.66412911, 3.21127539]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.poisson(lam&#x3D;1,size&#x3D;5)</span><br></pre></td></tr></table></figure>

<p>array([3, 2, 1, 0, 1])</p>
<h3 id="np-random-的统计函数-2"><a href="#np-random-的统计函数-2" class="headerlink" title="np.random 的统计函数(2)"></a>np.random 的统计函数(2)</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sum(a,axis=None)</td>
<td>按轴axis的方向对数组a求和，axis整数或元组</td>
</tr>
<tr>
<td>mean(a,axis=None)</td>
<td>求期望</td>
</tr>
<tr>
<td>average(a,axis=None,weights=None)</td>
<td>求加权平均值，weight权重</td>
</tr>
<tr>
<td>std(a,axis=None)</td>
<td>求标准差</td>
</tr>
<tr>
<td>var(a,axis=None)</td>
<td>求方差</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[ 1,  2,  3,  4],<br>                [ 5,  6,  7,  8],<br>                [ 9, 10, 11, 12]])</p>
<p><strong>sum()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sum(a)</span><br></pre></td></tr></table></figure>

<p>78</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sum(a,axis&#x3D;0)</span><br></pre></td></tr></table></figure>

<p>array([15, 18, 21, 24])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sum(a,axis&#x3D;1)</span><br></pre></td></tr></table></figure>

<p>array([10, 26, 42])</p>
<p><strong>mean()和average()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(12).reshape(3,4)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[ 0,  1,  2,  3],<br>    [ 4,  5,  6,  7],<br>    [ 8,  9, 10, 11]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.mean(a)</span><br></pre></td></tr></table></figure>

<p>5.5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.mean(a,axis&#x3D;1)</span><br></pre></td></tr></table></figure>

<p>array([1.5, 5.5, 9.5])</p>
<p><strong>std()和var()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(12).reshape(3,4)</span><br><span class="line"></span><br><span class="line">np.std(a)</span><br></pre></td></tr></table></figure>

<p>3.452052529534663</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.var(a)</span><br></pre></td></tr></table></figure>

<p>11.916666666666666</p>
<h3 id="np-random-的统计函数-3"><a href="#np-random-的统计函数-3" class="headerlink" title="np.random 的统计函数(3)"></a>np.random 的统计函数(3)</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>min(a), max(a)</td>
<td>计算数组a中的最值</td>
</tr>
<tr>
<td>argmin(a), argmax(a)</td>
<td>计算数组a中的最值降一维后的下标</td>
</tr>
<tr>
<td>unravel_index(index, shape)</td>
<td>按照shape将index转换为多维下标</td>
</tr>
<tr>
<td>pip(a)</td>
<td>计算数组a中最大值和最小值的差</td>
</tr>
<tr>
<td>median(a)</td>
<td>计算数组a中的中位数</td>
</tr>
</tbody></table>
<p>测试数组a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(15,0,-1).reshape(3,5)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([[15, 14, 13, 12, 11],<br>                [10,  9,  8,  7,  6],<br>                [ 5,  4,  3,  2,  1]])</p>
<p><strong>min(),max(),argmin(),argmax(),unrevel_index()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.min(a)</span><br></pre></td></tr></table></figure>

<p>1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.max(a)</span><br></pre></td></tr></table></figure>

<p>15</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.argmin(a)</span><br></pre></td></tr></table></figure>

<p>14</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.argmax(a)</span><br></pre></td></tr></table></figure>

<p>0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.unravel_index(np.argmin(a),a.shape)</span><br></pre></td></tr></table></figure>

<p>(2, 4)</p>
<p><strong>pip(),median()函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.ptp(a)</span><br></pre></td></tr></table></figure>

<p>14</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.median(a)</span><br></pre></td></tr></table></figure>

<p>8.0</p>
<h2 id="NumPy-的梯度函数"><a href="#NumPy-的梯度函数" class="headerlink" title="NumPy 的梯度函数"></a>NumPy 的梯度函数</h2><h3 id="np-random的梯度函数"><a href="#np-random的梯度函数" class="headerlink" title="np.random的梯度函数"></a>np.random的梯度函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>np.gradient(f)</td>
<td>计算数组f中元素的梯度，当f为多维时，返回每个维度的梯度</td>
</tr>
</tbody></table>
<p><strong>gradient</strong>()函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.random.randint(1,5,5)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>array([1, 1, 1, 3, 4])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.gradient(a)</span><br></pre></td></tr></table></figure>

<p>array([0. , 0. , 1. , 1.5, 1. ])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; np.random.randint(1,12,12).reshape(3,4)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>array([[ 9,  2,  1,  9],<br>    [10,  6, 11,  3],<br>    [ 3,  3,  8,  8]])</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.gradient(b)</span><br></pre></td></tr></table></figure>

<p>[array([[ 1. ,  4. , 10. , -6. ],<br>    [-3. ,  0.5,  3.5, -0.5],<br>    [-7. , -3. , -3. ,  5. ]]), array([[-7. , -4. ,  3.5,  8. ],<br>    [-4. ,  0.5, -1.5, -8. ],<br>    [ 0. ,  2.5,  2.5,  0. ]])]</p>
<h2 id="学习来源"><a href="#学习来源" class="headerlink" title="学习来源"></a>学习来源</h2><blockquote>
<p><a href="https://www.youtube.com/watch?v=Obbc3pC5_g0&t=9615s" target="_blank" rel="noopener">YouTube | 5小时学会Python 数据分析与展示(2020年版)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>科学计算与可视化</category>
      </categories>
      <tags>
        <tag>NumPy</tag>
        <tag>科学计算</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 博客搭建和next主题美化</title>
    <url>/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8Cnext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote>
<p><a href="https://tding.top/" target="_blank" rel="noopener">小丁的个人博客</a><br><a href="https://guanqr.com/" target="_blank" rel="noopener">荷戟独彷徨</a><br><a href="https://huangpiao.tech/" target="_blank" rel="noopener">见渊の博客</a><br><a href="https://vic.kim/" target="_blank" rel="noopener">Vicの博客</a><br><a href="https://yxyuxuan.github.io/" target="_blank" rel="noopener">于禤的博客</a><br><a href="https://io-oi.me/" target="_blank" rel="noopener">reuixiy</a><br><a href="https://leay.net/" target="_blank" rel="noopener">禾七博客</a><br><a href="https://zhiho.github.io/" target="_blank" rel="noopener">Zhiho’s Blog</a><br><a href="https://www.qtmuniao.com/" target="_blank" rel="noopener">Muniao’s blog</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>折腾技术</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo 搭建</tag>
        <tag>next 美化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 标签云</title>
    <url>/hexo-%E6%A0%87%E7%AD%BE%E4%BA%91/</url>
    <content><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/tagcloud.png" alt="TagCloud"></p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>首先在博客的 hexo 的目录下的 <code>package.json</code> 文件中添加: <code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code><br>然后在终端中执行 <code>npm install</code> 命令<br>接下来去修改主题的 tagcloud 的模板。</p>
</blockquote>
<h3 id="对于-swig-用户"><a href="#对于-swig-用户" class="headerlink" title="对于 swig 用户"></a>对于 swig 用户</h3><blockquote>
<p>这里以 Next 主题为例。<br>找到文件 <code>next/layout/_macro/sidebar.swig</code>, 然后添加如下内容。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcloud.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcanvas.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;Tag Cloud&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width:100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对于-ejs-的用户"><a href="#对于-ejs-的用户" class="headerlink" title="对于 ejs 的用户"></a>对于 ejs 的用户</h3><blockquote>
<p>这里以默认主题 landscape 为例。<br>tagcloud 模板文件为 <code>hexo/themes/landscape/layout/_widget/tagcloud.ejs</code><br>将这个文件修改为如下内容：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (site.tags.length) &#123; %&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&lt;%- url_for(&#39;&#x2F;js&#x2F;tagcloud.js&#39;) %&gt;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&lt;%- url_for(&#39;&#x2F;js&#x2F;tagcanvas.js&#39;) %&gt;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;&lt;%&#x3D; __(&#39;tagcloud&#39;) %&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class="line">      &lt;canvas width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width:100%&quot;&gt;</span><br><span class="line">        &lt;%- tagcloud() %&gt;</span><br><span class="line">      &lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>如果你使用的是 <a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">icarus</a> 主题, 请查阅 <a href="https://github.com/MikeCoder/hexo-tag-cloud/issues/31" target="_blank" rel="noopener">Issue #31</a>.</p>
<h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><blockquote>
<p>完成安装和显示，可以通过 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 来进行本地预览, hexo clean 为必须选项。<br><strong>PS:不要使用 <code>hexo g -d 或者 hexo d -g</code> 这类组合命令。</strong>详情见: <a href="https://github.com/MikeCoder/hexo-tag-cloud/issues/7" target="_blank" rel="noopener">Issue 7</a></p>
</blockquote>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>现在 hexo-tag-cloud 插件支持自定义啦。非常简单的步骤就可以改变你的标签云的字体和颜色，还有突出高亮。</p>
<blockquote>
<p>在你的博客根目录，找到 <em>_config.yml</em> 文件然后添加如下的配置项:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo-tag-cloud</span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: &#39;#333&#39;</span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: &#39;#E2E1D1&#39;</span><br><span class="line">    maxSpeed: 0.5</span><br><span class="line">    pauseOnSelected: false # true 意味着当选中对应 tag 时,停止转动</span><br></pre></td></tr></table></figure>
<ul>
<li>然后使用 <code>hexo c &amp;&amp; hexo g &amp;&amp; hexo s</code> 使用标签云。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/" target="_blank" rel="noopener">Hexo博客建立标签云及效果展示</a><br><a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md" target="_blank" rel="noopener">Hexo Tag Cloud</a></p>
]]></content>
      <categories>
        <category>折腾技术</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>标签云</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 标签插件</title>
    <url>/hexo-%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>引用书上的句子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<p>引用 Twitter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<p>引用网络上的文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p>普通的代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<p>指定语言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<p>附加说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<p>附加说明和网址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock _.compact http:&#x2F;&#x2F;underscorejs.org&#x2F;#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<p>反引号代码块<br>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[language] [title] [url] [link text] code snippet</span><br></pre></td></tr></table></figure>

<h2 id="引用图片和视频"><a href="#引用图片和视频" class="headerlink" title="引用图片和视频"></a>引用图片和视频</h2><p>Image<br>插入指定大小的图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] &#39;&quot;title text&quot; &quot;alt text&quot;&#39; %&#125;</span><br></pre></td></tr></table></figure>

<p>视频<br>在文章中插入 Youtube 视频。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾技术</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>引用</tag>
        <tag>代码块</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib 入门</title>
    <url>/matplotlib-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="简单输入数据绘图"><a href="#简单输入数据绘图" class="headerlink" title="简单输入数据绘图"></a>简单输入数据绘图</h3><p><strong>给定Y轴坐标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.ylabel(&quot;data&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>给定x,y数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.array([0,1,2,3,4])</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.array([0,1,2,3,4])</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line"># 保存为png图片</span><br><span class="line">plt.savefig(&#39;.&#x2F;test&#39;,dpi&#x3D;500)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="axis-设置显示x-y的范围"><a href="#axis-设置显示x-y的范围" class="headerlink" title="axis()设置显示x,y的范围"></a>axis()设置显示x,y的范围</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(5)</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.ylabel(&#39;data&#39;)</span><br><span class="line">plt.axis([-1,5,0,7])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="设置绘图区域"><a href="#设置绘图区域" class="headerlink" title="设置绘图区域"></a>设置绘图区域</h3><p><strong>subplot()设置绘图区域</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; 1&#x2F;x</span><br><span class="line"></span><br><span class="line">plt.subplot(2,1,1)</span><br><span class="line">plt.plot(x,y1)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,1,2)</span><br><span class="line">plt.plot(x,y2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="绘制多条曲线"><a href="#绘制多条曲线" class="headerlink" title="绘制多条曲线"></a>绘制多条曲线</h3><p><strong>plot()函数</strong></p>
<p><code>plot(x,y,format_string, **ksargs)</code></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x，y</td>
<td>输入数据</td>
</tr>
<tr>
<td>format_string</td>
<td>控制曲线的格式字符串，可选</td>
</tr>
<tr>
<td>**kwargs</td>
<td>第二组或更多组数据</td>
</tr>
<tr>
<td><em>注意：当绘制多条曲线是，各曲线的x不能省略</em></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; x*4</span><br><span class="line">y3 &#x3D; x*6</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,x,y2,x,y3)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>format_string:控制曲线的颜色，风格，标记</strong></p>
<table>
<thead>
<tr>
<th>颜色字符</th>
<th>说明</th>
<th>风格字符</th>
<th>说明</th>
<th>标记字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘r’</td>
<td>红色</td>
<td>‘-‘</td>
<td>实线</td>
<td>‘.’</td>
<td>点标记</td>
</tr>
<tr>
<td>‘c’</td>
<td>青绿色</td>
<td>‘–’</td>
<td>破折线</td>
<td>‘o’</td>
<td>实心圈标记</td>
</tr>
<tr>
<td>‘k’</td>
<td>黑色</td>
<td>‘:’</td>
<td>虚线</td>
<td>‘v’</td>
<td>倒三角标记</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; x*4</span><br><span class="line">y3 &#x3D; x*6</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,&#39;ro-&#39;,x,y2,&#39;gv&#39;,x,y3,&#39;b--&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="中文显示"><a href="#中文显示" class="headerlink" title="中文显示"></a>中文显示</h3><p>pyplot默认不支持中文显示，有两种办法实现中文显示。</p>
<ul>
<li>方法1：修改rcParams，实现全局字体修改(不推荐)</li>
<li>方法2：在需要中文显示的地方，增加一个properties属性(推荐)</li>
</ul>
<p><strong>rcParams的属性</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘font_family’</td>
<td>字体名</td>
</tr>
<tr>
<td>‘font_style’</td>
<td>字体风格</td>
</tr>
<tr>
<td>‘font_size’</td>
<td>字体大小</td>
</tr>
</tbody></table>
<p><code>rcParams[&#39;font_family&#39;]</code></p>
<table>
<thead>
<tr>
<th>中文字体</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘STSong’</td>
<td>中文宋体</td>
</tr>
<tr>
<td>‘SimHei’</td>
<td>中文黑体</td>
</tr>
<tr>
<td>‘Kaiti’</td>
<td>中文楷体</td>
</tr>
<tr>
<td>‘FangSong’</td>
<td>中文仿宋</td>
</tr>
<tr>
<td>‘YouYuan’</td>
<td>中文幼圆</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib</span><br><span class="line"></span><br><span class="line"># 待解决问题</span><br><span class="line"># 方法1</span><br><span class="line"># matplotlib.rcParams[&#39;font.family&#39;] &#x3D; &#39;FangSong&#39; </span><br><span class="line"># matplotlib.rcParams[&#39;font.size&#39;] &#x3D; 15</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y &#x3D; x</span><br><span class="line"></span><br><span class="line"># plt.xlabel(&#39;横轴：x&#39;)</span><br><span class="line"># plt.ylabel(&#39;纵轴：y&#39;)</span><br><span class="line"># 方法2</span><br><span class="line">plt.xlabel(&#39;横轴：x&#39;,fontproperties&#x3D;&#39;FangSong&#39;,fontsize&#x3D;15)</span><br><span class="line">plt.ylabel(&#39;纵轴：y&#39;,fontproperties&#x3D;&#39;FangSong&#39;,fontsize&#x3D;15)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;ro-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="pyplot的文本显示函数"><a href="#pyplot的文本显示函数" class="headerlink" title="pyplot的文本显示函数"></a>pyplot的文本显示函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>plt.xlabel()</td>
<td>x轴增加文本标签</td>
</tr>
<tr>
<td>plt.ylabel()</td>
<td>y轴增加文本标签</td>
</tr>
<tr>
<td>plt.title()</td>
<td>图形整体增加文本标签</td>
</tr>
<tr>
<td>plt.text()</td>
<td>任意位置增加文本</td>
</tr>
<tr>
<td>plt.annotate()</td>
<td>在图形中增加带箭头的注释</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(0.0,5.0,0.01)</span><br><span class="line">y &#x3D; np.cos(2*np.pi*x)</span><br><span class="line"></span><br><span class="line">plt.xlabel(&#39;time&#39;)</span><br><span class="line">plt.ylabel(&#39;amplitude&#39;)</span><br><span class="line">plt.title(r&#39;example $y&#x3D;cos(2\pi x)$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.text(2,1.3,r&#39;$\mu&#x3D;100$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.axis([-1,6,-2,2])</span><br><span class="line">plt.grid(True)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;r-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>plt.annotate(s,xy=arrow_crd,xytext=text_ctd,arrowprops=dict)</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>s</td>
<td>显示的文本</td>
</tr>
<tr>
<td>xy=arrow_crd</td>
<td>箭头位置</td>
</tr>
<tr>
<td>xytext=text_ctd</td>
<td>文本位置</td>
</tr>
<tr>
<td>arrowprops=dict</td>
<td>箭头属性</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(0.0,5.0,0.01)</span><br><span class="line">y &#x3D; np.cos(2*np.pi*x)</span><br><span class="line"></span><br><span class="line">plt.xlabel(&#39;time&#39;)</span><br><span class="line">plt.ylabel(&#39;amplitude&#39;)</span><br><span class="line">plt.title(r&#39;example $y&#x3D;cos(2\pi x)$&#39;,fontsize&#x3D;20)</span><br><span class="line"># plt.text(2,1.3,r&#39;$\mu&#x3D;100$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.axis([-1,6,-2,2])</span><br><span class="line">plt.grid(True)</span><br><span class="line"># 箭头两端缩进距离 shrink&#x3D;0.1</span><br><span class="line">plt.annotate(r&#39;$\mu&#x3D;100$&#39;,xy&#x3D;(2,1),xytext&#x3D;(3,1.5),arrowprops&#x3D;dict(facecolor&#x3D;&#39;black&#39;, shrink&#x3D;0.1, width&#x3D;2))</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;r-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="复杂的子绘图区域"><a href="#复杂的子绘图区域" class="headerlink" title="复杂的子绘图区域"></a>复杂的子绘图区域</h3><p><code>plt.subplot2grid(GridSpec,CurSpec,colspan=1,rowspan=1)</code></p>
<p>理念：设定网格，选中网格，确定选中行列区域数量，编号从0开始 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((3,3),(0,0),colspan&#x3D;3)</span><br><span class="line">plt.subplot2grid((3,3),(1,0),colspan&#x3D;2)</span><br><span class="line">plt.subplot2grid((3,3),(1,2),rowspan&#x3D;2)</span><br><span class="line">plt.subplot2grid((3,3),(2,0))</span><br><span class="line">plt.subplot2grid((3,3),(2,1))</span><br></pre></td></tr></table></figure>

<p><strong>GridSpec类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.gridspec as gridspec</span><br><span class="line"></span><br><span class="line">gs &#x3D; gridspec.GridSpec(3,3)</span><br><span class="line">a1 &#x3D; plt.subplot(gs[0,:])</span><br><span class="line">a2 &#x3D; plt.subplot(gs[1,:-1])</span><br><span class="line">a3 &#x3D; plt.subplot(gs[1:,-1])</span><br><span class="line">a4 &#x3D; plt.subplot(gs[2,0])</span><br><span class="line">a5 &#x3D; plt.subplot(gs[2,1])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>科学计算与可视化</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>我的文章</title>
    <url>/%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="99a406a3e7d34a6589ef2f395e6919576cd1f107698926086f1d69c64428991b">061f5f5bec8341ff7bc815c843e718e2080c0b0d5495eaad18c2865ea87431294c676ee7b273f4eb46c9f448f9cfd5a2d3446f683990202cf976c7cd76bcda34d3b0a67d319f2cd52e7e04ecd5deaade</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>matplotlib 绘制简单图形</title>
    <url>/matplotlib-%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2/</url>
    <content><![CDATA[<h2 id="matplotlib-入门"><a href="#matplotlib-入门" class="headerlink" title="matplotlib 入门"></a>matplotlib 入门</h2><h3 id="简单输入数据绘图"><a href="#简单输入数据绘图" class="headerlink" title="简单输入数据绘图"></a>简单输入数据绘图</h3><p><strong>给定Y轴坐标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.ylabel(&quot;data&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>给定x,y数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.array([0,1,2,3,4])</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.array([0,1,2,3,4])</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line"># 保存为png图片</span><br><span class="line">plt.savefig(&#39;.&#x2F;test&#39;,dpi&#x3D;500)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="axis-设置显示x-y的范围"><a href="#axis-设置显示x-y的范围" class="headerlink" title="axis()设置显示x,y的范围"></a>axis()设置显示x,y的范围</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(5)</span><br><span class="line">y &#x3D; np.array([1,3,4,5,2])</span><br><span class="line">plt.ylabel(&#39;data&#39;)</span><br><span class="line">plt.axis([-1,5,0,7])</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<h3 id="设置绘图区域"><a href="#设置绘图区域" class="headerlink" title="设置绘图区域"></a>设置绘图区域</h3><p><strong>subplot()设置绘图区域</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; 1&#x2F;x</span><br><span class="line"></span><br><span class="line">plt.subplot(2,1,1)</span><br><span class="line">plt.plot(x,y1)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,1,2)</span><br><span class="line">plt.plot(x,y2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="绘制多条曲线"><a href="#绘制多条曲线" class="headerlink" title="绘制多条曲线"></a>绘制多条曲线</h3><p><strong>plot()函数</strong></p>
<p><code>plot(x,y,format_string, **ksargs)</code></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x，y</td>
<td>输入数据</td>
</tr>
<tr>
<td>format_string</td>
<td>控制曲线的格式字符串，可选</td>
</tr>
<tr>
<td>**kwargs</td>
<td>第二组或更多组数据</td>
</tr>
</tbody></table>
<p><em>注意：当绘制多条曲线是，各曲线的x不能省略</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; x*4</span><br><span class="line">y3 &#x3D; x*6</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,x,y2,x,y3)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>format_string:控制曲线的颜色，风格，标记</strong></p>
<table>
<thead>
<tr>
<th>颜色字符</th>
<th>说明</th>
<th>风格字符</th>
<th>说明</th>
<th>标记字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘r’</td>
<td>红色</td>
<td>‘-‘</td>
<td>实线</td>
<td>‘.’</td>
<td>点标记</td>
</tr>
<tr>
<td>‘c’</td>
<td>青绿色</td>
<td>‘–’</td>
<td>破折线</td>
<td>‘o’</td>
<td>实心圈标记</td>
</tr>
<tr>
<td>‘k’</td>
<td>黑色</td>
<td>‘:’</td>
<td>虚线</td>
<td>‘v’</td>
<td>倒三角标记</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y1 &#x3D; x*2</span><br><span class="line">y2 &#x3D; x*4</span><br><span class="line">y3 &#x3D; x*6</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,&#39;ro-&#39;,x,y2,&#39;gv&#39;,x,y3,&#39;b--&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="中文显示"><a href="#中文显示" class="headerlink" title="中文显示"></a>中文显示</h3><p>pyplot默认不支持中文显示，有两种办法实现中文显示。</p>
<ul>
<li>方法1：修改rcParams，实现全局字体修改(不推荐)</li>
<li>方法2：在需要中文显示的地方，增加一个properties属性(推荐)</li>
</ul>
<p>rcParams的属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘font_family’</td>
<td>字体名</td>
</tr>
<tr>
<td>‘font_style’</td>
<td>字体风格</td>
</tr>
<tr>
<td>‘font_size’</td>
<td>字体大小</td>
</tr>
<tr>
<td>rcParams[‘font_family’]</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>中文字体</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘STSong’</td>
<td>中文宋体</td>
</tr>
<tr>
<td>‘SimHei’</td>
<td>中文黑体</td>
</tr>
<tr>
<td>‘Kaiti’</td>
<td>中文楷体</td>
</tr>
<tr>
<td>‘FangSong’</td>
<td>中文仿宋</td>
</tr>
<tr>
<td>‘YouYuan’</td>
<td>中文幼圆</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib</span><br><span class="line"></span><br><span class="line"># 待解决问题</span><br><span class="line"># 方法1</span><br><span class="line"># matplotlib.rcParams[&#39;font.family&#39;] &#x3D; &#39;FangSong&#39; </span><br><span class="line"># matplotlib.rcParams[&#39;font.size&#39;] &#x3D; 15</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(12)</span><br><span class="line">y &#x3D; x</span><br><span class="line"></span><br><span class="line"># plt.xlabel(&#39;横轴：x&#39;)</span><br><span class="line"># plt.ylabel(&#39;纵轴：y&#39;)</span><br><span class="line"># 方法2</span><br><span class="line">plt.xlabel(&#39;横轴：x&#39;,fontproperties&#x3D;&#39;FangSong&#39;,fontsize&#x3D;15)</span><br><span class="line">plt.ylabel(&#39;纵轴：y&#39;,fontproperties&#x3D;&#39;FangSong&#39;,fontsize&#x3D;15)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;ro-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="pyplot的文本显示函数"><a href="#pyplot的文本显示函数" class="headerlink" title="pyplot的文本显示函数"></a>pyplot的文本显示函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>plt.xlabel()</td>
<td>x轴增加文本标签</td>
</tr>
<tr>
<td>plt.ylabel()</td>
<td>y轴增加文本标签</td>
</tr>
<tr>
<td>plt.title()</td>
<td>图形整体增加文本标签</td>
</tr>
<tr>
<td>plt.text()</td>
<td>任意位置增加文本</td>
</tr>
<tr>
<td>plt.annotate()</td>
<td>在图形中增加带箭头的注释</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(0.0,5.0,0.01)</span><br><span class="line">y &#x3D; np.cos(2*np.pi*x)</span><br><span class="line"></span><br><span class="line">plt.xlabel(&#39;time&#39;)</span><br><span class="line">plt.ylabel(&#39;amplitude&#39;)</span><br><span class="line">plt.title(r&#39;example $y&#x3D;cos(2\pi x)$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.text(2,1.3,r&#39;$\mu&#x3D;100$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.axis([-1,6,-2,2])</span><br><span class="line">plt.grid(True)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;r-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>plt.annotate(s,xy=arrow_crd,xytext=text_ctd,arrowprops=dict)</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>s</td>
<td>显示的文本</td>
</tr>
<tr>
<td>xy=arrow_crd</td>
<td>箭头位置</td>
</tr>
<tr>
<td>xytext=text_ctd</td>
<td>文本位置</td>
</tr>
<tr>
<td>arrowprops=dict</td>
<td>箭头属性</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.arange(0.0,5.0,0.01)</span><br><span class="line">y &#x3D; np.cos(2*np.pi*x)</span><br><span class="line"></span><br><span class="line">plt.xlabel(&#39;time&#39;)</span><br><span class="line">plt.ylabel(&#39;amplitude&#39;)</span><br><span class="line">plt.title(r&#39;example $y&#x3D;cos(2\pi x)$&#39;,fontsize&#x3D;20)</span><br><span class="line"># plt.text(2,1.3,r&#39;$\mu&#x3D;100$&#39;,fontsize&#x3D;20)</span><br><span class="line">plt.axis([-1,6,-2,2])</span><br><span class="line">plt.grid(True)</span><br><span class="line"># 箭头两端缩进距离 shrink&#x3D;0.1</span><br><span class="line">plt.annotate(r&#39;$\mu&#x3D;100$&#39;,xy&#x3D;(2,1),xytext&#x3D;(3,1.5),arrowprops&#x3D;dict(facecolor&#x3D;&#39;black&#39;, shrink&#x3D;0.1, width&#x3D;2))</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,&#39;r-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="复杂的子绘图区域"><a href="#复杂的子绘图区域" class="headerlink" title="复杂的子绘图区域"></a>复杂的子绘图区域</h3><p><code>plt.subplot2grid(GridSpec,CurSpec,colspan=1,rowspan=1)</code></p>
<p>理念：设定网格，选中网格，确定选中行列区域数量，编号从0开始 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((3,3),(0,0),colspan&#x3D;3)</span><br><span class="line">plt.subplot2grid((3,3),(1,0),colspan&#x3D;2)</span><br><span class="line">plt.subplot2grid((3,3),(1,2),rowspan&#x3D;2)</span><br><span class="line">plt.subplot2grid((3,3),(2,0))</span><br><span class="line">plt.subplot2grid((3,3),(2,1))</span><br></pre></td></tr></table></figure>

<p><strong>GridSpec类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.gridspec as gridspec</span><br><span class="line"></span><br><span class="line">gs &#x3D; gridspec.GridSpec(3,3)</span><br><span class="line">a1 &#x3D; plt.subplot(gs[0,:])</span><br><span class="line">a2 &#x3D; plt.subplot(gs[1,:-1])</span><br><span class="line">a3 &#x3D; plt.subplot(gs[1:,-1])</span><br><span class="line">a4 &#x3D; plt.subplot(gs[2,0])</span><br><span class="line">a5 &#x3D; plt.subplot(gs[2,1])</span><br></pre></td></tr></table></figure>

<h2 id="matplotlib-绘图"><a href="#matplotlib-绘图" class="headerlink" title="matplotlib 绘图"></a>matplotlib 绘图</h2><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">labels &#x3D; [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;]</span><br><span class="line">sizes &#x3D; [20,30,40,10]</span><br><span class="line">explode &#x3D; [0,0.1,0,0]</span><br><span class="line">plt.pie(sizes,explode&#x3D;explode,labels&#x3D;labels,autopct&#x3D;&#39;%1.1f%%&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(1)</span><br><span class="line">mu, sigma &#x3D; 100, 20 # 均值和标准差</span><br><span class="line">a &#x3D; np.random.normal(mu, sigma, 100)</span><br><span class="line"></span><br><span class="line">plt.hist(a,10,mormed&#x3D;True,histtype&#x3D;&#39;stepfilled&#39;,facecolor&#x3D;&#39;b&#39;,alpha&#x3D;0.75)</span><br><span class="line">plt.title(&#39;histtype&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.random.seed(10)</span><br><span class="line">x &#x3D; 10*np.random.randn(100)</span><br><span class="line">y &#x3D; 10*np.random.randn(100)</span><br><span class="line"></span><br><span class="line">fig, ax &#x3D; plt.subplots()</span><br><span class="line">ax.plot(x,y,&#39;o&#39;)</span><br><span class="line">ax.set_title(&#39;scatter&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科学计算与可视化</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>探索计划</title>
    <url>/%E6%8E%A2%E7%B4%A2%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2fcaca03929de3078ddcf81d52e02658f6d21c975960d69d51cfa6b8a2861a4d">0bff1ad54d907584d633a24e35dedf9522889683372b9f1d70f09934b1b1fb134851b2169fb13c42791d79ae3249fdc4676d16d121fad78e4211394b4ee8e16cad0be86863a4641d37372b266e9140e61258cb63bcb3b7aad7d44f6aa8b2346d9236259282bc8b91fce1f4473c1f69150433f00411d971181b816edce8ce23deea4b03a5926d2061103e4e6ec10f257fd2a702432fc82d05811751a7cd9d8cd01ebb2b35a733cdb905908df610fefb6ad44180f101c9042c70a154b41e761ad665b07513619e8e61446a8aea362f61aea6f10c6d85e56b2ddbf9fc8dd4d2de6e485f25ca5483aa2a31da0e3298a947846a27780db4d09e2d3335b3584c84f7a89730a6148693bc417dc2869f0f37997602940f5941011c2f043f323b5415bcba</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>折腾技术</category>
        <category>探索</category>
      </categories>
      <tags>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="367586e36bed64efb0521b696468c9fa61537fba983b73de60ffa55b1afe1195">bdf4592309bff8240816b022e210e6dc7c2cea20e8054deaff76d945210317f9f6bf4ebb44d8b501d4d5ded38e336009f6c14a50b726ac4343e82d5dfcf29bce72b9e0c8cfa0f6c340cc99857c8d0f357c2109467e51a4896810d32be2fa1c7ad96ec316e2bde67eaaf9f7e7976ee62c32228f58bb28ea091c8880c00630b74a6692a9ee0fa867b1fedd4227c92242f457991bf23b69cdc799aea2b380e7743d4e27f6671b4f00a9a790c88410ff6408ca8204c9d5d4b7ec87fca009c44b4ccaeadfd5ecf2542ea2815901b74132b4474288906779e10e8d40ae801daf37147d008781f26248a04fe4a1f8b07c6e28c7171ceaa21cdc8d02a08566215a50c5a7313d79680dd1c38fa27dd5203ec1422aa52c11dc7892a8b2dc54a2ef9135c1012cbbfbc751cec72b6358ab078cf4a5a804fbba6e8a569fbe4c5bceff9c2f809d6c8af17d77fab285ad7f6a76a8a23ceef1dc201f0f99414c88218cc86aa65eec5207a2e59c9e99d7b7e8c88fb0b8bf10f1bd8bc3caa45f1379dff432a86e2e296e26365ab5499064211e132f1a5e29fa567c8f6dd885412ebf1afe0b07f0802ec5dfa3c34948e55dcc024d94696cad37a9030b7b214e69f12645364d7cfb4d488bf31c211f737f246b30028b538da4edc844e3c7bbf5c6e9f8eac458c24fedcbb86d495443ef4f609308843b86642898be3763b5938dadfb1b3ff7e0fed9eec2972bb7096e23b272f107da87fc9cfc4b5dffadc4b410fd3dff914d1627bcccd4723dacf413402214cac2ac0b14a840d9ec409dd242a3c714e0a2b2df09ebabfc969b5ffb4ee32218c310dd3d507a4f75f6cf662c479025b64bb8f32a536dfc9eecff621b05b590eebece4c222b49e01565f61bd1d2ece9e567f305b00f00e69aba51218f027c122ecf9fc56258e8b8077d98ab6935e3769f266f52ab68d96b9c4896c5d11e88a53e6a17fcbf46fe06171faffbd8d80195aa350e57264814bc4cc730fbc400d7edfeeb3ccc16b7f34635f7342bc0b21893d91ef0e2c8d93c3db25df32882a0598254f41df76dae71f6fb6968e17a03ab74c429df234507072b34e4a8ce142279d430512f524ebb641ffc08ec17619968a86d0d58188ae41a7a3c93ce55ea74f1782b4478fc90d80cf6999a37de0b693cb3c06e6ec8f1aa9244239ae0d917f68ec598ca6f3f898a711c264498102d6088820acfb2ee7a5b2fd9cc733f7ae3b06543d775b7a642ad9dfeaae3749a09d9f757e6246ed3ec85c3e7f3c8646854c7fbe258682dac294b0d2954b433f6d76b5cd92876d7ee849ca807384b877ce7226a3b18c86ae053526d42e16e6f6a2644c06e9d465d1c70a023e333cb49fb670a90f602b77b1ea20ad86bdc2f090073ca49bd80d7812cac9117db100c2860e259b5b3f64f0ed3be5bf3f5b680f884d67cdc0f26f645cc075cc547e970b8623f0d6f38108340a8ca10b5bad2391d44e5129159c372b5e5055e12d161fc080d534c0ad39e494c1f4249db1b30ef29116b3d77b04df84d83fa943addd15d0e1977ac6f50ed035abda951da2a4b5b2156ee7c7983b025dde4a28115f3520333b2b6937d8511aa136133e27854c233500e1f5633ee1c2cd47ca9aa4df6948f4b3a589cf138feaf25e86c8cad6757f8910db6ed5e1deba45969c27e0765f743fc6fec6ef2000dc7b5e9fc447d1e75d474f7ff06124493a84eaccdc07233c24a2d3e8ac3442b04597e51ced65efc789bf6bc30f6bdcee37cfb49ac58faae69dabe900638ef4a0f97ee38720de8f49f43692c7a5cdd94e98fba081b7a5e4255155be3d592ec4f6f320bd7da3184e93f9f359410798131cb3e3bacc8fed5034a1349a77078b70ce93944350fabb3cf14ac98d9b23693a1931501108bbbe41fac0b11a4697d3f96fc8d5599437a1007474d0ca1c1eb38c3d036f1edd2b9fa66dc23c6189399143297b778d5aab1e82b0ab7ed49c29d99697283a6fe76662cd0f30a15a4abb66ad70adcafc8828a2b58592a688e1a868ea89f6bd6067414aec814e282c0917e2c8496184d3f300e4b3227bf3ec00d4b8edba5010ca7d32395541c1425a4cc88b1b1e4dc31bc725262548b3c9e5c00075928367c105635c1248503d5bb58493d80bf66a52f61bb82351988a9b612c660559ea72e9347b4456c00ad82f48711bac800eed70d27de415de417d2c7576cc2c895cbfac6ca1967457838af71ac888f0d31c01e7e8fa909733dbf5ff6462f055aed1f8f1588b15dfc8180db579ab78dcf9cc69c33138a9d5fc14981059313a1d6a9c85519135d09ec8f864a8a9d387a3404174979b66dcdaee52aa68c2b3b965bd5119a69bd9e77e77f178b6b195c8eb23b26d09ef0d7a67496696c4ab0fb93b8bd82d6256ac585a6fb6cd0ac9f9c599ad49e8692b47120c579d4d0be3a6c8a25b3959f8bfc9ea333bb0c9ff6224d95e102e70beb9a8a550c94b628e93423d76edff7d517afdf6ca69daf8f5ceffab774c94e34476550bdd7d17d72d68d935d00000b824b61abea678250876d8ef8f98b23faf39d4b280a1e6f9d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>折腾技术</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>trojan</tag>
        <tag>bbr</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>收藏夹</title>
    <url>/%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
    <content><![CDATA[<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="漂亮的博客"><a href="#漂亮的博客" class="headerlink" title="漂亮的博客"></a>漂亮的博客</h3><blockquote>
<p><a href="https://blog.dlzhang.com/" target="_blank" rel="noopener">班班碎碎念</a></p>
</blockquote>
<h3 id="技术类博客"><a href="#技术类博客" class="headerlink" title="技术类博客"></a>技术类博客</h3><blockquote>
<p><a href="https://www.voidking.com/" target="_blank" rel="noopener">前后端、机器学习、算法、运维</a></p>
</blockquote>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><blockquote>
<p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标库</a><br><a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">Font Awesome 中文网</a><br><a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome 官网</a><br><a href="https://www.easyicon.net/" target="_blank" rel="noopener">Easy Icon</a></p>
</blockquote>
<h3 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h3><blockquote>
<p><a href="https://www.pexels.com/" target="_blank" rel="noopener">pexels</a><br><a href="https://wallhaven.cc/" target="_blank" rel="noopener">wallhaven</a><br><a href="https://www.10wallpaper.com/cn/" target="_blank" rel="noopener">10wallpaper</a><br><a href="https://anime.goodfon.com/index-36.html" target="_blank" rel="noopener">goodfon</a></p>
</blockquote>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><blockquote>
<p><a href="https://www.draw.io/" target="_blank" rel="noopener">绘图</a></p>
</blockquote>
<hr>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="macOS-软件"><a href="#macOS-软件" class="headerlink" title="macOS 软件"></a>macOS 软件</h3><blockquote>
<p><a href="https://www.macat.vip/" target="_blank" rel="noopener">马克喵</a></p>
</blockquote>
<h3 id="Google-浏览器插件"><a href="#Google-浏览器插件" class="headerlink" title="Google 浏览器插件"></a>Google 浏览器插件</h3><blockquote>
<p>沙拉查词<br>书签侧边栏<br>简悦 - SimpRead<br>Tampermonkey<br>Start Here 新标签页(首页更漂亮)<br>Online Download Manager<br>Fatkun图片批量下载<br>Proxy SwitchyOmega<br>Astar VPN</p>
</blockquote>
<hr>
<h2 id="youtobe-相关"><a href="#youtobe-相关" class="headerlink" title="youtobe 相关"></a>youtobe 相关</h2><h3 id="youtobe-音乐"><a href="#youtobe-音乐" class="headerlink" title="youtobe 音乐"></a>youtobe 音乐</h3><blockquote>
<p><a href="https://www.youtube.com/channel/UCcHWhgSsMBemnyLhg6GL1vA" target="_blank" rel="noopener">中文音乐</a></p>
</blockquote>
<h3 id="youtobe-视频下载"><a href="#youtobe-视频下载" class="headerlink" title="youtobe 视频下载"></a>youtobe 视频下载</h3><blockquote>
<p><a href="https://www.y2mate.com/en/youtube" target="_blank" rel="noopener">y2mate</a></p>
</blockquote>
<hr>
<h2 id="文件分享"><a href="#文件分享" class="headerlink" title="文件分享"></a>文件分享</h2><blockquote>
<p><a href="https://cowtransfer.com/" target="_blank" rel="noopener">奶牛快传</a></p>
</blockquote>
<ul>
<li>分享文件给好友</li>
<li>在线/下载客户端</li>
<li>免费，不限速</li>
</ul>
<blockquote>
<p><a href="https://transfer.sh/" target="_blank" rel="noopener">transfer</a></p>
</blockquote>
<ul>
<li>命令行，可取别名</li>
<li>分享文件给好友</li>
<li>单文件10G上传限制，保留14天</li>
<li>免费，不限速，可加密</li>
</ul>
]]></content>
      <categories>
        <category>收藏夹</category>
      </categories>
  </entry>
</search>
